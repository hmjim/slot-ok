<?phpfunction wpu_silo_builder_init(){	$wpu_category_order = new WPUS_Category_Order();	$wpu_silo_builder = new WPUS_Silo_Builder();}if (!class_exists('WPUS_Silo_Builder')) {	class WPUS_Silo_Builder extends SU_Module	{		private $_siloArray = array(			'dws_id' => '',			'cat_ids' => ''		);		private $_siloStyles = array(			'link_color' => '#000000',			'link_size' => '13',			'link_size_type' => 'px',			'line_height' => '1.5'		);		private $_siloOptions = array(			'silo_title' => '',			'status' => 'draft',			'shortcode' => 0,			'silo-title' => 'primary_keyword_pagename',			'silo-slug' => 'primary_keyword_pagename',			'article-title' => 'Article_headline',			'article-slug' => 'primary_keyword_pagename',			'longtail-title' => 'Article_headline',			'longtail-slug' => 'primary_keyword_pagename',			'silo-menu-title' => 'Silo SEO Menu',		);		private $_silo_styles = array();		private $_silo_options = array();		private $variables_buffer = array();		# Constructor		public function __construct()		{			# silo structure manual sorting			add_action('wp_ajax_silo_structure_manual_sorting', array($this, 'silo_structure_manual_sorting_callback'));			# add meta boxes			// add_action('add_meta_boxes', array($this, 'add_meta_boxes'));			# save post data late binding for overwriting category			add_action('save_post', array($this, 'silostructure_save_postdata'), 11);			add_action('silo-import', array($this, 'processSiloImport'), 10, 1);			$this->_silo_options = maybe_unserialize(get_option(WPUS_PLUGIN_OPTIONS));			$this->_silo_styles = maybe_unserialize(get_option(WPUS_PLUGIN_STYLES));			if (empty($this->_silo_options) || !is_array($this->_silo_options)) $this->_silo_options = $this->_siloOptions;			if (empty($this->_silo_styles) || !is_array($this->_silo_styles)) $this->_silo_styles = $this->_siloStyles;			add_action('admin_init', array(&$this, 'wpu_silo_admin_init'));			add_action('admin_menu', array(&$this, 'wpu_silo_admin_actions'));			add_action('widgets_init', array($this, 'closure'));			include_once(ABSPATH . 'wp-admin/includes/plugin.php');			$use_other_seo_check = ((isset($this->_silo_options['wpu_use_other_seo']) || array_key_exists('wpu_use_other_seo', $this->_silo_options)) ? $this->_silo_options['wpu_use_other_seo'] : 0);			if ($use_other_seo_check != 1) {				// add_action('add_meta_boxes', array(&$this, 'add_seo'));				// add_action('wp_insert_post', array(&$this, 'save_seo'), 20);			}			add_action('admin_init', array(&$this, 'add_main_navigation_menu'));		} // end constructor		/**		 * Add Meta Boxes		 */		public function add_meta_boxes()		{			# SILO PAGES (wordpress posts)			add_meta_box(				'silopages_meta_box',				'Silo Structure',				array($this, 'silopages_meta_box'),				'post',				'side',				'high'			);			add_meta_box(				'silopages_meta_box',				'Silo Structure',				array($this, 'silopages_meta_box'),				'page',				'side',				'high'			);		}		public function wpu_check_item_has_children($post_id)		{			$current_post = get_post($post_id);			if (($current_post->post_parent == 0) and ($current_post->post_type == "page")) {				$silo_cat_id = get_metadata('term',$post_id, '_wpu_pagematch_dws', true);				if (!$silo_cat_id)					return false;				$args = array(					"posts_per_page" => -1,					"post_type" => "page",					"post_status" => array("publish", "draft", "trash"),					"orderby" => "menu_order",					"order" => "ASC",					"post_parent" => $current_post->ID,				);				$silo_query = new WP_Query($args);				return ($silo_query->have_posts());			} elseif ($current_post->post_type == "page") {				$silo_cat_id = get_metadata('term',$post_id, '_wpu_pagematch_dws', true);				if (!$silo_cat_id)					return false;				$args = array(					"posts_per_page" => -1,					"post_type" => "post",					"post_status" => array("publish", "draft", "trash"),					"orderby" => "menu_order",					"order" => "ASC",					"cat" => $silo_cat_id,				);				$silo_query = new WP_Query($args);				return ($silo_query->have_posts());			} else {				return false;			}		}		/**		 * Silo Pages meta box		 */		public function silopages_meta_box($post)		{			$category = '';			# see if we are in silo			$silo_data = get_post_meta($post->ID, '_wpu_silo_dws', true);			if ('' != $silo_data) {				# get post categories				$categories = wp_get_post_categories($post->ID);				# get silo category				if (1 == count($categories))					$category = $categories[0];			}			# nonce for verification			wp_nonce_field(plugin_basename(__FILE__), 'silostructure_nonce');			$editing_post_type = $post->post_type;			$editing_post_parent = $post->post_parent;			$has_children = $this->wpu_check_item_has_children($post->ID);			$editing_silo_page_with_no_children = ($silo_data != "" and $editing_post_type == "page" and !$has_children);			$editing_top_level_page = ($silo_data != "" and $editing_post_parent == 0 and $editing_post_type == "page");			$editing_page_not_in_silo_or_post = (($silo_data == "" and $editing_post_type == "page") or ($editing_post_type == "post"));			if ($has_children) {				?><b>The current page cannot be removed from the silo structure as it has subordinated items</b>                <input type="hidden" name="silo_structure_page" value="home">				<?php			} else {				?>                <select name="silo_structure_page" style="width: 100%">					<?php  if (($editing_page_not_in_silo_or_post) or ($editing_silo_page_with_no_children)) { ?>                        <option value="0">Not in Silo</option>                        <option disabled>-------</option>						<?php if (($editing_post_type != "post" and $editing_top_level_page) or ($editing_post_type != "post" and $silo_data == "")) { ?>                            <option value="home" <?php echo ($editing_silo_page_with_no_children and $editing_top_level_page) ? "selected='selected'" : ""; ?>>                                Home                            </option>						<?php } ?>					<?php }?>					<?php					$args = array(						'post_type' => 'page',						'post_status' => array("publish", "draft"),						'meta_key' => '_wpu_silo_dws',						'parent' => 0,						'sort_column' => 'menu_order',						'sort_order' => 'asc'					);					$silo_pages = get_pages($args);					foreach ($silo_pages as $silo_page) {						# get the id of the category attached to the page						$art_cat = get_post_meta($silo_page->ID, '_wpu_catmatch_dws', true);						if ($art_cat) {							$child_silo_cat_id = $art_cat;						} else {							$child_silo_cat_id = get_category_by_slug($silo_page->post_name)->term_id;							$child_silo_cat_id = isset($child_silo_cat_id) ? $child_silo_cat_id : 0;							if ($child_silo_cat_id != 0) {								update_post_meta($silo_page->ID, '_wpu_catmatch_dws', (int)$child_silo_cat_id);								update_metadata('term', (int)$child_silo_cat_id, '_wpu_pagematch_dws', $silo_page->ID);							}						}						if ($editing_post_type == 'post') {							$status_id = (get_post_status($silo_page->ID) == "draft") ? " - draft" : "" ;							$listing_code .= "<optgroup label='".$silo_page->post_title.$status_id."'>";							$categories = get_categories("child_of=$child_silo_cat_id&hide_empty=0");							if ($categories):								foreach ($categories as $cat) {									$listing_code .= "<option value='$cat->cat_ID'" . selected($category, $cat->cat_ID, false) . ">" . $cat->name . "</option>";								}							endif;							$listing_code .= "</optgroup>";						} elseif (!$editing_top_level_page) {							$status_id = (get_post_status($silo_page->ID) == "draft") ? " - draft" : "" ;							$selected_text = ($silo_data != "") ? selected($editing_post_parent, $silo_page->ID, false) : "";							$listing_code .= "<option value='$silo_page->ID'" . $selected_text . ">".$silo_page->post_title.$status_id."</option>";						}					}					echo $listing_code;					?>                </select>				<?php			}		}		/**		 * Save post data		 *		 * @param string $post_id		 */		public function silostructure_save_postdata($post_id)		{			# if it's autosave			if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)				return false;			if (wp_is_post_revision($post_id))				return false;			# verify it came from our plugin			if (!isset($_POST['silostructure_nonce']) || !wp_verify_nonce($_POST['silostructure_nonce'], plugin_basename(__FILE__)))				return false;			# check permissions for posts			if ('post' == $_POST['post_type']) {				if (!current_user_can('edit_posts'))					return false;			} elseif ('page' == $_POST['post_type']) {				if (!current_user_can('edit_pages'))					return false;			} else {				# for all other not our post types				return false;			}			$siloseocheck = get_option( '_wpu_silo_builder' );			if ( isset( $seosilocheck['wpu_use_other_seo'] ) and ( $seosilocheck['wpu_use_other_seo'] != 1 ) ) {				update_option( "wpu_use_other_seo", 1 );				/*				$mc_page_title   = $_POST["dws_meta_title"];				$mc_page_title_d = ( $mc_page_title ) ? $mc_page_title : ( ( get_the_title( $post_id ) == "Auto Draft" ) ? "" : get_the_title( $post_id ) );				$mc_page_title   = ( $mc_page_title ) ? $mc_page_title : ( ( get_the_title( $post_id ) == "Auto Draft" ) ? "" : get_the_title( $post_id ) );				$mc_meta_keyword = $_POST["dws_meta_key"];				$mc_meta_keyword = ( $mc_meta_keyword ) ? $mc_meta_keyword : "";				$mc_meta_desc    = $_POST["dws_meta_desc"];				$mc_meta_desc    = ( $mc_meta_desc ) ? $mc_meta_desc : "";				$this->updateSEO( $post_id, $mc_page_title, $mc_meta_desc, $mc_meta_keyword );				*/			}			# new category			$cat_id = isset($_POST['silo_structure_page']) ? $_POST['silo_structure_page'] : 0;			# if adding to silo structure			if (0 != $cat_id or $cat_id === "home") {				# if editing post in silo structure				if ('post' == $_POST['post_type']) {					# set dws if it wasn't set					if ('' == get_post_meta($post_id, '_wpu_silo_dws', true)) {						# random number						$dws_id = mt_rand(1000000, 9999999);						update_post_meta($post_id, "_wpu_silo_dws", $dws_id);					}					# post current categories					$post_categories = wp_get_post_categories($post_id);					# if category is not the right one					if (1 != count($post_categories) || false === array_search($cat_id, $post_categories)) {						# set new category						wp_set_post_categories($post_id, array($cat_id));					}					# get post for menu order					$thispost = get_post($post_id);					# assign proper menu order					if (0 == $thispost->menu_order) {						# set the correct menu order						$posts = get_posts("category=$cat_id&posts_per_page=-1");						# get the biggest menu order						$biggest_menu_order = 0;						foreach ($posts as $post) {							if ($post->menu_order > $biggest_menu_order)								$biggest_menu_order = $post->menu_order;						}						# make it bigger						$biggest_menu_order += 1;						remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);						wp_update_post(array('ID' => $post_id, 'menu_order' => $biggest_menu_order));						add_action('save_post', array($this, 'silostructure_save_postdata'), 11);					}				} # IF editing PAGE in silo structure                elseif ('page' == $_POST['post_type']) {					$thispost = get_post($post_id);					if ('0' == $_POST['silo_structure_page']) {						delete_post_meta($post_id, '_wpu_silo_dws');						return false;					}					$keyword = get_the_title($post_id);					# strangely, since wp 4.6, post_type nav_menu_item was getting in and throwing an error. This test fixes it.					if (empty($keyword)) {						return false;					}					$this_page_slug = get_post_field('post_name',$post_id);					$wpu_menu_order = get_post_field('menu_order',$post_id);					# Same actions as before manual insertion					$parent_id = $_POST['silo_structure_page'];					# add silo level					if ($parent_id == 'home') {						$args = array(							'post_type' => 'page',							'meta_key' => '_wpu_silo_dws',							'posts_per_page' => -1,							'orderby' => 'menu_order',							'order' => 'ASC',							'post_parent' => 0,						);						$silo_pages = new WP_Query($args);						# only do on new silo pages						if ($wpu_menu_order == 0) {							$biggest_menu_order = 1;							# get the biggest menu order							while ($silo_pages->have_posts()) {								$silo_pages->the_post();								if ($biggest_menu_order < get_post()->menu_order)									$biggest_menu_order = get_post()->menu_order;							}							# make it bigger							$biggest_menu_order += 1;							$mc_page_array = array(								'ID' => $post_id,								'menu_order' => $biggest_menu_order,							);							remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);							wp_update_post($mc_page_array);							add_action('save_post', array($this, 'silostructure_save_postdata'), 11);						} else {							$biggest_menu_order = $wpu_menu_order;						}						# random number						if ("" == get_post_meta($post_id, "_wpu_silo_dws", true)) {							$dws_id = mt_rand(1000000, 9999999);							update_post_meta($post_id, "_wpu_silo_dws", $dws_id);						}						# check by post meta (or slug) if category exists for this silo						$catmatch_check = (int) get_post_meta($post_id, '_wpu_catmatch_dws', true);						if($catmatch_check):							$exist = term_exists($catmatch_check, 'category');						else:							# fallback compatibility							$exist = term_exists($this_page_slug, 'category');						endif;						$args = array(							'slug' => $this_page_slug,						);						if ($exist):							$silo_cat_id = wp_update_term($exist['term_id'], 'category', $args);						else:							$silo_cat_id = wp_insert_term(ucwords($keyword), 'category',$args);						endif;						$silo_cat_id = (array)$silo_cat_id;						$silo_cat_id = $silo_cat_id['term_id'];						update_metadata('term', $silo_cat_id, 'tax-order', $biggest_menu_order);						update_metadata('term', $silo_cat_id, '_wpu_pagematch_dws', $post_id);						update_post_meta($post_id, '_wpu_catmatch_dws', (int)$silo_cat_id);					}					# add category level					else {						$args = array(							'post_type' => 'page',							'meta_key' => '_wpu_silo_dws',							'posts_per_page' => -1,							'orderby' => 'menu_order',							'order' => 'ASC',							'post_parent' => $parent_id,						);						$silo_pages = new WP_Query($args);						# only do on new category pages						if ($wpu_menu_order == 0) {							$biggest_menu_order = 1;							# get the biggest menu order							while ($silo_pages->have_posts()) {								$silo_pages->the_post();								if ($biggest_menu_order < get_post()->menu_order)									$biggest_menu_order = get_post()->menu_order;							}							# make it bigger							$biggest_menu_order += 1;							$wpus_child_page_array = array(								'ID' => $post_id,								'post_parent' => $parent_id,								'menu_order' => $biggest_menu_order,							);							remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);							wp_update_post($wpus_child_page_array);							add_action('save_post', array($this, 'silostructure_save_postdata'), 11);						} else {							$biggest_menu_order = $wpu_menu_order;						}						# random number						if ("" == get_post_meta($post_id, "_wpu_silo_dws", true)) {							$dws_id = mt_rand(1000000, 9999999);							update_post_meta($post_id, "_wpu_silo_dws", $dws_id);						}						# get the id of the category attached to the parent page						$catmatch_check = get_post_meta($parent_id, '_wpu_catmatch_dws', true);						if ($catmatch_check)							$parent_silo_cat_id = $catmatch_check;						# check by slug or by post meta if category exists						$check_cat_id = (int) get_post_meta($post_id, '_wpu_catmatch_dws', true);						if($check_cat_id):							$exist = term_exists($check_cat_id, 'category');						else:							# fallback compatibility							$exist = term_exists($this_page_slug, 'category');						endif;						$args = array(							'slug' => $this_page_slug,							'parent' => $parent_silo_cat_id,						);						if ($exist):							$wpus_cat_id = wp_update_term($exist['term_id'], 'category', $args);							$wpus_cat_id = (array)$wpus_cat_id;							$wpus_cat_id = $wpus_cat_id['term_id'];						else:							$wpus_cat_id = wp_insert_term(ucwords($keyword), 'category', $args);							$wpus_cat_id = (array)$wpus_cat_id;							$wpus_cat_id = $wpus_cat_id['term_id'];						endif;						update_post_meta($post_id, "_wpu_catmatch_dws", (int)$wpus_cat_id);						update_metadata('term', $wpus_cat_id, 'tax-order', $biggest_menu_order);						update_metadata('term', $wpus_cat_id, '_wpu_pagematch_dws', $post_id);					}				}			} # removing from silo structure            elseif (get_post_meta($post_id, '_wpu_silo_dws', true)) {				# get the id of the category attached to this page				$wpu_cat_id = get_post_meta($post_id, '_wpu_catmatch_dws', true);				# remove _wpu_silo_dws				delete_post_meta($post_id, '_wpu_silo_dws');				delete_post_meta($post_id, '_wpu_catmatch_dws');				delete_post_meta($post_id, '_wpu_article_dws');				delete_post_meta($post_id, '_wpu_category_aggregated');				delete_metadata('term', $wpu_cat_id, '_wpu_pagematch_dws');				delete_metadata('term', $wpu_cat_id, 'tax-order');				if (get_post_type($post_id) == "page") {					$mc_page_array = array(						'ID' => $post_id,						'post_parent' => 0					);					remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);					wp_update_post($mc_page_array);					add_action('save_post', array($this, 'silostructure_save_postdata'), 11);				} else {					wp_set_post_categories($post_id, array());				}			}		}		public function closure()		{			register_widget('V_Advanced_Silo');		}		/**		 * Generate Unique Slug		 * @param string $slug		 * @param int $post_ID		 * @return $slug		 */		function generate_unique_slug($slug, $post_ID)		{			global $wpdb;			$check_sql = "SELECT post_name FROM $wpdb->posts WHERE post_name = %s AND ID != %d LIMIT 1";			$post_name_check = $wpdb->get_var( $wpdb->prepare( $check_sql, $slug, $post_ID ) );			if ($post_name_check) {				$suffix = 2;				do {					$alt_post_name = substr ($slug, 0, 200 - ( strlen( $suffix ) + 1 ) ) . "-$suffix";					$post_name_check = $wpdb->get_var( $wpdb->prepare($check_sql, $alt_post_name, $post_ID ) );					$suffix++;				} while ( $post_name_check );				$slug = $alt_post_name;			}			return $slug;		}		function save_seo($post_id)		{			# Bail if we're doing an auto save			if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;			# if our nonce isn't there, or we can't verify it, bail			if (!isset($_POST['meta_dws_nonce']) || !wp_verify_nonce($_POST['meta_dws_nonce'], 'dws_meta_nonce')) return;			# if our current user can't edit this post, bail			if (!current_user_can('edit_posts')) return;			$mc_page_title = $_POST["dws_meta_title"];			$mc_page_title = ($mc_page_title) ? $mc_page_title : ((get_the_title($post_id) == "Auto Draft") ? "" : get_the_title($post_id));			$mc_meta_keyword = $_POST["dws_meta_key"];			$mc_meta_keyword = ($mc_meta_keyword) ? $mc_meta_keyword : "";			$mc_meta_desc = $_POST["dws_meta_desc"];			$mc_meta_desc = ($mc_meta_desc) ? $mc_meta_desc : "";			$this->updateSEO($post_id, $mc_page_title, $mc_meta_desc, $mc_meta_keyword);			$post_type_page = (get_post_type($post_id) == "page");			$post_parent = (int) $_POST['silo_structure_page'];			if($post_parent != 0 and $post_type_page and !wp_is_post_revision($post_id)){				remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);				remove_action('wp_insert_post', array(&$this, 'save_seo'), 20);				wp_update_post(array('ID' => $post_id, 'post_parent' => $post_parent));				add_action('save_post', array($this, 'silostructure_save_postdata'), 11);				add_action('wp_insert_post', array(&$this, 'save_seo'), 20);			}		}		function add_seo()		{			if (function_exists('add_meta_box')) {				add_meta_box('wpu-silo-meta', WPUS_THEME_NAME . " Meta Area", array(&$this, 'meta_silo_builder'), 'post', 'normal', 'high');				add_meta_box('wpu-silo-meta', WPUS_THEME_NAME . " Meta Area", array(&$this, 'meta_silo_builder'), 'page', 'normal', 'high');			}		}		function meta_silo_builder()		{			global $post;			$values = get_post_custom($post->ID);			$seo = (isset($values['dws_seo_meta']) ? maybe_unserialize($values['dws_seo_meta'][0]) : array(				'title' => '', 'desc' => '', 'keywords' => ''			));			?>            <style type="text/css">                #dws-meta-wrap {background: #fff;padding: 10px;border: #DDD 1px solid;}                #dws-meta-wrap .title {font-size: 14px;}                #dws-meta-wrap label {font-weight: bold;}                #dws-meta-wrap .regular-text {width: 100%;}                #wpuseosnippet {margin: 0 0 10px;padding: 0 5px;font-family: Arial, Helvetica, sans-serif;font-style: normal;width: auto;max-width: 520px;}                #wpuseotitle {color: #1e0fbe;font-size: 18px !important;line-height: 1.2;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;display: block;width: 512px;}                #wpuseourl {color: #006621;font-size: 13px;line-height: 16px;}                #wpuseodesc {line-height: 1.4;font-size: small;margin-top: 0;}            </style>			<?php			$post_id = $post->ID;			$dats = $this->get_meta_fields_from_other_seo($post_id);			$seo['title'] = (isset($seo['title']) ? $seo['title'] : $dats['title']);			$seo['desc'] = (isset($seo['desc']) ? $seo['desc'] : $dats['description']);			$seo['keywords'] = (isset($seo['keywords']) ? $seo['keywords'] : $dats['keywords']);			$the_title = get_the_title($post_id);			$the_title = (($the_title != "Auto Draft") ? $the_title : "");			$post_seo_title = (isset($the_title) ? $the_title : "");			$post_seo_url = get_permalink($post_id);			$post_seo_url = str_replace(array("http://","https://"), "", $post_seo_url);			$post_seo_excerpt = wpu_get_the_excerpt($post_id, true);			$wpu_in_seo_title = (isset($seo['title']) ? $seo['title'] : $the_title);			$wpu_in_seo_desc = (isset($seo['desc']) ? $seo['desc'] : $post_seo_excerpt);			$wpu_in_seo_desc = (isset($wpu_in_seo_desc) ? $wpu_in_seo_desc : "");			$wpu_in_seo_keys = (isset($seo['keywords']) ? $seo['keywords'] : "");			?>            <script type="text/javascript">                var wpu_meta_title_default = "<?php echo htmlentities($the_title . " - " . get_bloginfo("name"));?>";                var wpu_meta_desc_default = "<?php echo apply_filters("the_title", htmlentities($post_seo_excerpt));?>";                function wpuChangePostMeta() {                    var wpu_meta_title = document.getElementById('dws_meta_title').value;                    var wpu_meta_desc = document.getElementById('dws_meta_desc').value;                    document.getElementById('dws_title_charcount').innerHTML = wpu_meta_title.length;                    document.getElementById('dws_meta_description_charcount').innerHTML = wpu_meta_desc.length;                    document.getElementById('wpuseotitle').innerHTML = (wpu_meta_title != "") ? wpu_meta_title : wpu_meta_title_default;                    document.getElementById('wpuseodesccontent').innerHTML = (wpu_meta_desc != "") ? wpu_meta_desc : wpu_meta_desc_default;                }            </script>            <div id="dws-meta-wrap">                <span class="title">Meta Information</span>                <table cellpadding="5" width="100%">                    <tr>                        <td align="right" valign="top"><label for="dws_meta_title">Snippet Example:</label></td>                        <td align="left" valign="top">                            <div id="wpuseosnippet">                                <a class="title" id="wpuseotitle" href="#"><?php echo $wpu_in_seo_title;?></a>                                <span id="wpuseourl"><?php echo $post_seo_url;?></span>                                <p class="wpuseodesc" id="wpuseodesc">                                    <span class="content" id="wpuseodesccontent"><?php echo $wpu_in_seo_desc;?></span>                                </p>                            </div>                        </td>                    </tr>                    <tr>                        <td align="right" valign="top"><label for="dws_meta_title">Title:</label></td>                        <td align="left" valign="top"><input type="text" name="dws_meta_title" id="dws_meta_title" class="regular-text" value="<?php echo $wpu_in_seo_title; ?>"onkeyup="javascript:wpuChangePostMeta();"><br/>                            You've entered <strong id="dws_title_charcount"><?php echo strlen($wpu_in_seo_title); ?></strong> characters. Most search engines use up to 70.                        </td>                    </tr>                    <tr>                        <td align="right" valign="top"><label for="dws_meta_desc">Description:</label></td>                        <td align="left" valign="top"><textarea name="dws_meta_desc" id="dws_meta_desc" class="regular-text" cols="60" rows="3" onkeyup="javascript:wpuChangePostMeta();"><?php echo $wpu_in_seo_desc; ?></textarea><br/>                            You've entered <strong id="dws_meta_description_charcount"><?php echo strlen($wpu_in_seo_desc); ?></strong> characters. Most search engines use up to 160.                        </td>                    </tr>                    <tr>                        <td align="right" valign="top"><label for="dws_meta_key">Keywords:</label></td>                        <td align="left" valign="top"><input type="text" name="dws_meta_key" id="dws_meta_key" value="<?php echo $wpu_in_seo_keys; ?>" class="regular-text"/>                        </td>                    </tr>					<?php $seo_plugins = $this->wpu_detect_seo_plugins();					if (count($seo_plugins)) {						?>                        <tr>                            <td align="right" valign="top"><label for="dws_meta_key">SEO Plugins Detected:</label></td>                            <td align="left" valign="top" style="color: #c10000; font-weight: bold;"><?php echo implode(",&nbsp;&nbsp;", $seo_plugins);?>                            </td>                        </tr>					<?php }?>                </table>				<?php // We'll use this nonce field later on when saving.				wp_nonce_field('dws_meta_nonce', 'meta_dws_nonce');  ?>            </div>			<?php		} // end meta_silo_builder()		function wpu_silo_admin_init()		{			wp_register_style('wpu-silo-plugin-css', plugins_url('css/wpu-silo-styles.css', __FILE__), $deps = array(), $ver = '1.0.0', $media = 'all');			wp_register_style('wpu-silo-bootstrap-css', plugins_url('css/bootstrap.min.css', __FILE__), $deps = array(), $ver = '1.0.0', $media = 'all');			wp_register_style('wpu-silo-colorpicker', plugins_url('css/jquery.miniColors.css', __FILE__), $deps = array(), $ver = '1.0.0', $media = 'all');			wp_register_script('wpu-silo-colorpicker', plugins_url('js/jquery.miniColors.min.js', __FILE__));			wp_register_script('wpu-silo-script', plugins_url('js/wpu-silo.js', __FILE__));		}		function wpu_silo_admin_actions()		{			$silo_admin = add_menu_page(__(WPUS_THEME_NAME . " Theme Settings", WPUS_TXT_DOMAIN), __(WPUS_THEME_NAME, WPUS_TXT_DOMAIN),				'activate_plugins', 'wpu-silo-builder', array(&$this, 'create_silo_setting'), '', 7);			$silo_admin2 = add_submenu_page('wpu-silo-builder', __('Settings', WPUS_TXT_DOMAIN), __('Settings', WPUS_TXT_DOMAIN),				'activate_plugins', 'wpu-silo-builder', array(&$this, 'create_silo_setting'));			$silo_admin6 = add_submenu_page('wpu-silo-builder', __(WPUS_THEME_NAME . " - Manual Silo Builder", WPUS_TXT_DOMAIN),				__('Manual Silo Builder', WPUS_TXT_DOMAIN), 'activate_plugins', 'wpu-silo-manual-builder', array(&$this, 'create_manual_builder'));			add_action('load-' . $silo_admin6, array($this, 'create_manual_builder_init'));			$silo_admin3 = add_submenu_page('wpu-silo-builder', __(WPUS_THEME_NAME . " - Silo Importer", WPUS_TXT_DOMAIN),				__('Silo Importer', WPUS_TXT_DOMAIN), 'activate_plugins', 'wpu-silo-importer', array(&$this, 'create_silo_admin'));			add_action('load-' . $silo_admin3, array($this, 'create_silo_admin_init'));			$silo_admin7 = add_submenu_page('wpu-silo-builder', __(WPUS_THEME_NAME . " - Export Reports", WPUS_TXT_DOMAIN),				__('Export Reports', WPUS_TXT_DOMAIN), 'activate_plugins', 'v-silo-map', array(&$this, 'create_silo_map'));			$silo_admin4 = add_submenu_page('wpu-silo-builder', __(WPUS_THEME_NAME . " - Styles", WPUS_TXT_DOMAIN),				__('Silo Styles', WPUS_TXT_DOMAIN), 'activate_plugins', 'wpu-silo-styles', array(&$this, 'create_style_admin'));			// Admin print styles action when plugin is called			add_action('admin_print_styles-' . $silo_admin, array(&$this, 'wpu_silo_load_style'));			add_action('admin_print_styles-' . $silo_admin2, array(&$this, 'wpu_silo_load_style'));			add_action('admin_print_styles-' . $silo_admin3, array(&$this, 'wpu_silo_load_style'));			add_action('admin_print_styles-' . $silo_admin4, array(&$this, 'wpu_silo_load_style'));			add_action('admin_enqueue_scripts', array(&$this, 'wpu_silo_load_script'));		} // end wpu_silo_admin_actions		/**		 * Manual Silo Builder page init		 */		public function create_manual_builder_init()		{			$location = 'admin.php?page=wpu-silo-manual-builder';			$text_area = '';			$page_sel = '';			$errors = array();			# if form was submitted and nonce verified			if (isset($_POST['_wpnonce']) && wp_verify_nonce($_POST['_wpnonce'], plugin_basename(__FILE__))) {				if (!isset($_POST['page_selected'])) {					$errors[] = "A page should be selected.";				} else {					$page_sel = $_POST['page_selected'];					$page_selected = explode("_", $_POST['page_selected']);				}				$text_area = stripslashes_deep($_POST['keywords']);				$keywords_status = $_POST['status'];				$keywords_status = ($keywords_status == "publish" or $keywords_status == "draft" or $keywords_status == "delete") ? $keywords_status : "publish";				$keywords = trim($_POST['keywords']);				$keywords = explode("\n", $keywords);				$new_keywords = array();				foreach ($keywords as $key => $value) {					$value = preg_replace('/\r/', '', $value);					if ('' != trim($value))						$new_keywords[] = $value;				}				if ((0 == count($new_keywords)) and ($keywords_status != "delete")) {					$errors[] = "Keywords should not be empty.";				}				if ($keywords_status == "delete") {					list($type, $parent_id) = $page_selected;					$count_silos = 0;					$count_categories = 0;					$count_posts = 0;					if ('silo' == $type) {						# Wipes out entire silo structure						# Fetch list of posts and pages in silo structure						$args = array(							'post_type' => array('page','post'),							'meta_key' => '_wpu_silo_dws',							'posts_per_page' => -1,							'orderby' => 'menu_order',							'order' => 'ASC',							'fields' => 'ids'						);						$all_silo_pages = new WP_Query($args);						# Array of IDs for these posts and pages						$all_silo_page_ids = $all_silo_pages->posts;						# Loop through IDs and delete along with meta we added						if (is_array($all_silo_page_ids)) {							foreach ($all_silo_page_ids as $current_silo_page) {								wp_delete_post($current_silo_page, false);								delete_post_meta($current_silo_page, '_wpu_silo_dws');								delete_post_meta($current_silo_page, '_wpu_catmatch_dws');								++$count_silos;							}						}						# List of all categories, including not in silo structure						$all_categories = get_categories(array('hide_empty'=>0));						# Loop through categories and delete those in the silo structure along with meta we added						if (is_array($all_categories)) {							foreach ($all_categories as $each_category) {								# Make sure to check first to avoid deleting wp categories outside silo structure								$current_category = get_metadata('term',$each_category->term_id, '_wpu_pagematch_dws', true);								if ($current_category) {									wp_delete_category($each_category->term_id);									delete_metadata('term', $each_category->term_id, '_wpu_pagematch_dws');									delete_metadata('term', $each_category->term_id, 'tax-order');								}							}						}					}					if ('cat' == $type) {						# Get the id of the wp category attached to this Silo level page						$silo_cat_id = get_post_meta($parent_id, '_wpu_catmatch_dws', true);						if (!$silo_cat_id) {							$errors[] = "Main category don't match. Could not continue.";							$this->variables_buffer = array(								"errors" => $errors,								"text_area" => $text_area,								"page_sel" => $page_sel,							);							return true;						}						# Fetch list of Category level pages						$args = array(							'post_type' => 'page',							'meta_key' => '_wpu_silo_dws',							'posts_per_page' => -1,							'post_parent' => $parent_id,							'orderby' => 'menu_order',							'order' => 'ASC',							'fields' => 'ids'						);						$category_pages = new WP_Query($args);						# Array of IDs for these pages						$category_page_ids = $category_pages->posts;						if (is_array($category_page_ids)) {							foreach ($category_page_ids as $category_level_id) {								$child_cat_id = get_post_meta($category_level_id, '_wpu_catmatch_dws', true);								if (!$child_cat_id) {									$errors[] = "One or more sub-categories don't match. These have not been deleted.";									$this->variables_buffer = array(										"errors" => $errors,										"text_area" => $text_area,										"page_sel" => $page_sel,									);									continue;								}								# Find children of this category								$child_args = array(									'post_type' => 'post',									'meta_key' => '_wpu_silo_dws',									'cat' => $child_cat_id,									'posts_per_page' => -1,									'orderby' => 'menu_order',									'order' => 'ASC',									'fields' => 'ids'								);								$child_pages = new WP_Query($child_args);								# Array of IDs for child posts								$child_page_ids = $child_pages->posts;								# Delete the children								if (is_array($child_page_ids)) {									foreach ($child_page_ids as $child_level_id) {										wp_delete_post($child_level_id);										++$count_posts;									}								}								# Delete this Category level page, its accompanying wp category and meta								wp_delete_post($category_level_id, false);								wp_delete_category($child_cat_id);								delete_post_meta($category_level_id, '_wpu_silo_dws');								delete_post_meta($category_level_id, '_wpu_catmatch_dws');								delete_metadata('term', $child_cat_id, '_wpu_pagematch_dws');								delete_metadata('term', $child_cat_id, 'tax-order');								++$count_categories;							}						}						# Delete this Silo level page, its accompanying wp category and meta						wp_delete_post($parent_id, false);						wp_delete_category($silo_cat_id);						delete_post_meta($parent_id, '_wpu_silo_dws');						delete_post_meta($parent_id, '_wpu_catmatch_dws');						delete_metadata('term', $silo_cat_id, '_wpu_pagematch_dws');						delete_metadata('term', $silo_cat_id, 'tax-order');					}                    elseif ('page' == $type) {						# Get the id of the wp category attached to this Category level page						$category_page_id = get_metadata('term',$parent_id, '_wpu_pagematch_dws', true);						if (!$category_page_id) {							$errors[] = "Main category don't match. Could not continue.";							$this->variables_buffer = array(								"errors" => $errors,								"text_area" => $text_area,								"page_sel" => $page_sel,							);							return true;						}						$child_args = array(							'post_type' => 'post',							'meta_key' => '_wpu_silo_dws',							'cat' => $parent_id,							'posts_per_page' => -1,							'orderby' => 'menu_order',							'order' => 'ASC',							'fields' => 'ids'						);						$child_pages = new WP_Query($child_args);						# Array of IDs for child posts						$child_page_ids = $child_pages->posts;						# Delete the children						if (is_array($child_page_ids)) {							foreach ($child_page_ids as $child_level_id) {								wp_delete_post($child_level_id);								++$count_posts;							}						}						# Delete this Category level page, its accompanying wp category and meta						wp_delete_post($category_page_id);						wp_delete_category($parent_id);						delete_post_meta($category_page_id, '_wpu_silo_dws');						delete_post_meta($category_page_id, '_wpu_catmatch_dws');						delete_metadata('term', $parent_id, '_wpu_pagematch_dws');						delete_metadata('term', $parent_id, 'tax-order');					}					# Setup the messages					if ('page' == $type) {						$location = add_query_arg('delete-cat', $category_page_id, $location);						if ($count_posts > 0)							$location = add_query_arg('posts-deleted', $count_posts, $location);					} elseif ('silo' == $type) {						$location = add_query_arg('delete-silo', '1', $location);						if ($count_silos > 0) {							$location = add_query_arg('posts-deleted', $count_silos, $location);						}					} else {						$location = add_query_arg('delete', $parent_id, $location);						if ($count_categories > 0)							$location = add_query_arg('categories-deleted', $count_categories, $location);						if ($count_posts > 0)							$location = add_query_arg('posts-deleted', $count_posts, $location);					}					wp_redirect($location);					die;				}				if (2 == @count($page_selected) && !$errors) {					list($type, $parent_id) = $page_selected;					$count_posts = 0;					# add each keyword					foreach ($new_keywords as $keyword) {						if ($errors)							continue;						# add silo						if ('silo' == $type) {							$biggest_menu_order = 0;							$args = array(								'post_type' => 'page',								'meta_key' => '_wpu_silo_dws',								'posts_per_page' => -1,								'orderby' => 'menu_order',								'order' => 'ASC'							);							$silo_pages = new WP_Query($args);							# get the biggest menu order							while ($silo_pages->have_posts()) {								$silo_pages->the_post();								$parent_id = get_post()->post_parent;								if (0 == $parent_id) {									# if such silo exists, skip									if (get_post()->post_title == $keyword)										continue 2;									if ($biggest_menu_order < get_post()->menu_order)										$biggest_menu_order = get_post()->menu_order;								}							}							# make it bigger							$biggest_menu_order += 1;							$dws_id = mt_rand(1000000, 9999999);							$mc_page_array = array(								'menu_order' => $biggest_menu_order,								'post_author' => get_current_user_id(),								'post_content' => '',								'post_status' => $keywords_status,								'post_title' => ucwords($keyword),								'post_type' => 'page',								'meta_input' => array('_wpu_silo_dws' => (int)$dws_id) //since wp 4.4.0							);							$wpu_page_id = wp_insert_post($mc_page_array);							# Legacy Pre WP 4.4.0							add_post_meta($wpu_page_id, "_wpu_silo_dws", $dws_id, true);							$this->updateSEO($wpu_page_id, $mc_page_array['post_title'], '', '');							$check_cat_id = (int) get_post_meta($wpu_page_id, '_wpu_catmatch_dws', true);							if ($check_cat_id):								# if updating existing page								$exist = term_exists($check_cat_id, 'category');							else:								# if category matching is missing								$exist = term_exists(get_post($wpu_page_id)->post_name, 'category');							endif;							$args = array('slug' => get_post($wpu_page_id)->post_name);							if ($exist):								$silo_cat_id = wp_update_term($exist['term_id'], 'category', $args);								$silo_cat_id = $silo_cat_id['term_id'];							else:								$silo_cat_id = wp_insert_term(ucwords($keyword), 'category', $args);								$silo_cat_id = $silo_cat_id['term_id'];							endif;							update_post_meta($wpu_page_id, '_wpu_catmatch_dws', (int)$silo_cat_id);							update_metadata('term', $silo_cat_id, 'tax-order', $biggest_menu_order);							update_metadata('term', $silo_cat_id, '_wpu_pagematch_dws', $wpu_page_id);						}						# add category                        elseif ('cat' == $type) {							# get the biggest menu order							$biggest_menu_order = 0;							# get the id of the category attached to the parent page							$art_cat = get_post_meta($parent_id, '_wpu_catmatch_dws', true);							if ($art_cat)								$child_silo_cat_id = $art_cat;							$categories = get_categories("child_of=$child_silo_cat_id&hide_empty=0");							if ($categories):								foreach ($categories as $cat) {									# if such category exists, skip									if ($cat->name == $keyword)										continue 2;									if ($biggest_menu_order < $cat->tax_order)										$biggest_menu_order = $cat->tax_order;								}							endif;							# make it bigger							$biggest_menu_order += 1;							$dws_id = mt_rand(1000000, 9999999);							$wpus_child_page_array = array(								'menu_order' => $biggest_menu_order,								'post_author' => get_current_user_id(),								'post_content' => '',								'post_parent' => $parent_id,								'post_status' => $keywords_status,								'post_title' => ucwords($keyword),								'post_type' => 'page',								'meta_input' => array('_wpu_silo_dws' => (int)$dws_id) //since wp 4.4.0							);							$wpus_page_id = wp_insert_post($wpus_child_page_array);							# Legacy pre WP 4.4.0							add_post_meta($wpus_page_id, "_wpu_silo_dws", $dws_id, true);							$this->updateSEO($wpus_page_id, $wpus_child_page_array['post_title'], '', '');							# make sure the slug is unique - the "Dave Keys" bug							# we need to check outside the hierarchy, so we can't use wp_unique_post_slug()							$unique_slug = get_post_field('post_name',$wpus_page_id);							$check_cat_id = (int) get_post_meta($wpus_page_id, '_wpu_catmatch_dws', true);							if($check_cat_id):								# if updating existing page								$exist = term_exists($check_cat_id, 'category');							else:								# check if slug is assigned								$catmatch_check = (get_category_by_slug($unique_slug) ? get_category_by_slug($unique_slug)->term_id : false);								$args = array(									'post_type' => 'page',									'meta_key' => '_wpu_catmatch_dws',									'posts_per_page' => -1,									'meta_query' => array(										array(											'key'     => '_wpu_catmatch_dws',											'value'   => $catmatch_check,										),									),								);								$the_query = new WP_Query ($args);								if ($the_query->have_posts()) {									# create unique slug & update page to match category									$unique_slug = $this->generate_unique_slug($unique_slug, $wpus_page_id);									$page_slug_change = array(										'ID'          => $wpus_page_id,										'post_name'   => $unique_slug,									);									# remove action so it doesn't cause infinite loop. Remove filter so iframe posts									remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);									remove_filter('content_save_pre', 'wp_filter_post_kses');									wp_update_post($page_slug_change);									add_filter('content_save_pre', 'wp_filter_post_kses');									add_action('save_post', array($this, 'silostructure_save_postdata'), 11);									$exist = false;								} else {									# slug is not assigned									$exist = false;								}							endif;							# get the id of the category attached to the parent page							$parent_catmatch_check = get_post_meta($parent_id, '_wpu_catmatch_dws', true);							if ($parent_catmatch_check)								$parent_silo_cat_id = $parent_catmatch_check;							$args = array(								'slug' => $unique_slug,								'parent' => $parent_catmatch_check,							);							if ($exist):								$wpus_cat_id = wp_update_term($exist['term_id'], 'category', $args);								$wpus_cat_id = $wpus_cat_id['term_id'];							else:								$wpus_cat_id = wp_insert_term(ucwords($keyword), 'category', $args);								$wpus_cat_id = $wpus_cat_id['term_id'];							endif;							update_post_meta($wpus_page_id, '_wpu_catmatch_dws', (int)$wpus_cat_id);							update_metadata('term', $wpus_cat_id, 'tax-order', $biggest_menu_order);							update_metadata('term', $wpus_cat_id, '_wpu_pagematch_dws', $wpus_page_id);						}						# add page                        elseif ('page' == $type) {							# get the biggest menu order							$biggest_menu_order = 0;							query_posts("cat=$parent_id&posts_per_page=-1&orderby=menu_order&order=ASC");							if (have_posts()):								while (have_posts()): the_post();									# if such post exists, skip									if (get_post()->post_title == $keyword)										continue 2;									if ($biggest_menu_order < get_post()->menu_order)										$biggest_menu_order = get_post()->menu_order;								endwhile;							endif;							# make it bigger							$biggest_menu_order += 1;							$dws_id = mt_rand(1000000, 9999999);							$mc_post_array = array(								'menu_order' => $biggest_menu_order,								'post_author' => get_current_user_id(),								'post_category' => array($parent_id),								'post_content' => '',								'post_status' => $keywords_status,								'post_title' => ucwords($keyword),								'post_type' => 'post',								'meta_input' => array('_wpu_silo_dws' => (int)$dws_id) //since wp 4.4.0							);							$wpu_child_page_id = wp_insert_post($mc_post_array);							# Legacy pre WP 4.4.0							add_post_meta($wpu_child_page_id, "_wpu_silo_dws", $dws_id, true);							$this->updateSEO($wpu_child_page_id, $mc_post_array['post_title'], '', '');						}						++$count_posts;					}					if (!$errors) {						# show messages						if ('silo' == $type)							$location = add_query_arg('silos', $count_posts, $location);                        elseif ('cat' == $type)							$location = add_query_arg('cats', $count_posts, $location);                        elseif ('page' == $type)							$location = add_query_arg('pages', $count_posts, $location);						wp_redirect($location);						die;					}				}			}			$this->variables_buffer = array(				"errors" => $errors,				"text_area" => $text_area,				"page_sel" => $page_sel,			);		}		/**		 * Manual Silo Builder page		 */		public function create_manual_builder()		{			global $title;			# extract variables from buffer			extract($this->variables_buffer);			# messages			$message = false;			if (!empty($_GET['silos']) && 0 < ($silos = absint($_GET['silos']))) {				$message = sprintf(_n('Silo added.', '%d silos added.', $silos), number_format_i18n($silos));			} elseif (!empty($_GET['cats']) && 0 < ($cats = absint($_GET['cats']))) {				$message = sprintf(_n('Category added.', '%d categories added.', $cats), number_format_i18n($cats));			} elseif (!empty($_GET['pages']) && 0 < ($pages = absint($_GET['pages']))) {				$message = sprintf(_n('Page added.', '%d pages added.', $pages), number_format_i18n($pages));			} elseif (!empty($_GET['delete']) && 0 < ($delete = absint($_GET['delete']))) {				$deleted_page_title = get_post_field('post_title',$delete);				$message = sprintf('"%s"', $deleted_page_title);				if (!empty($_GET['categories-deleted']) && 0 < ($cat_deleted = absint($_GET['categories-deleted']))) {					$message .= sprintf(_n(' and %d category', ' and %d categories', $cat_deleted), $cat_deleted);					if (!empty($_GET['posts-deleted']) && 0 < ($post_deleted = absint($_GET['posts-deleted'])))						$message .= sprintf(_n(' and %d post', ' and %d posts', $post_deleted), $post_deleted);				}				$message .= ' deleted.<br>Clear the Trash to permanently delete.';			} elseif (!empty($_GET['delete-cat']) && 0 < ($delete_cat = absint($_GET['delete-cat']))) {				$deleted_page_title = get_post_field('post_title',$delete_cat);				if (!empty($_GET['posts-deleted']) && 0 < ($post_deleted = absint($_GET['posts-deleted'])))					$message = sprintf('"%s" and %d posts deleted.', $deleted_page_title, $post_deleted);				else					$message = sprintf('"%s" deleted.', $deleted_page_title);				$message .= '<br>Clear the Trash to permanently delete.';			} elseif (!empty($_GET['delete-silo']) && 0 < ($delete = absint($_GET['delete-silo']))) {				if (!empty($_GET['posts-deleted']) && 0 < ($post_deleted = absint($_GET['posts-deleted'])))					$message = sprintf('All pages and posts in the silo structure (%d total) deleted.', $post_deleted);				$message .= '<br>Clear the Trash to permanently delete.';			}			?>			<?php if ($message): ?>            <div id="message" class="updated"><p><?php echo $message ?></p></div>		<?php endif; ?>			<?php if ($errors):			foreach ($errors as $error): ?>                <div id="error" class="error"><p><strong><?php echo $error ?></strong></p></div>			<?php endforeach;		endif; ?>            <div class="wrap">                <h2><?php echo esc_html($title) ?></h2>                <form method="post" action="admin.php?page=wpu-silo-manual-builder">					<?php wp_nonce_field(plugin_basename(__FILE__), '_wpnonce'); ?>                    <div id="col-container">                        <div id="col-left" style="width: 65%">                            <p>You may click-drag-and-drop any item on the below manual silo builder (Except the Home Page).</p>                            <p>To delete a Silo or Category and everything under it, select it and choose Delete from the options below. To delete everything, select HOME.</p>                            <div class="control-group" id="reordering-pane">                                <div class="controls">                                    <style type="text/css">                                        h5 {font-size: 16px;color: #000;}                                        h6 {font-size: 14px;color: #222;}                                        .wpus-siloing ul {color: #333;margin: 5px 20px;list-style: disc outside none;}                                        .a li {list-style-type: decimal;}                                        .b li {list-style-type: lower-alpha;}                                        .c li {list-style-type: lower-roman;}                                        .wpus-article {color: #444;}                                        .wpus-article-post {color: #777;}                                        .reorder-loading, .reorder-loading *{cursor: wait !important;}                                        .highlight {background-color: #FFF;}                                    </style>                                    <blockquote>										<?php										$args = array(											'post_type' => 'page',											'meta_key' => '_wpu_silo_dws',											'posts_per_page' => -1,											'orderby' => 'menu_order',											'order' => 'ASC'										);										$silo_pages = new WP_Query($args);										$listing_code = "<div class='wpus-siloing'>";										$listing_code .= "<h5><label><input type='radio' name='page_selected' value='silo_0'" . checked($page_sel, 'silo_0', false) . " /> HOME</label></h5>";										$listing_code .= "<ol class='wpus-silos a'>";										while ($silo_pages->have_posts()):											$silo_pages->the_post();											$tmp_id = get_the_ID();											$parent_id = get_post()->post_parent;											$child_slug = get_post_field('post_name',$tmp_id);											if (get_post_status($tmp_id) == "draft") {												$draftStr = " - <b>draft</b>";											}                                            elseif (get_post_status($tmp_id) == "trash") {												$draftStr = " - <b>trash</b>";											}											else {												$draftStr = "";											}											if ($parent_id == 0) {												$listing_code .= "<li>";												$listing_code .= "<h6><label><input type='radio' name='page_selected' value='cat_" . get_the_ID() . "'" . checked($page_sel, 'cat_' . get_the_ID(), false) . " /> " . get_the_title() . $draftStr . "</label></h6>";												# get the id of the category attached to the page												$check_cat_id = (int) get_post_meta($tmp_id, '_wpu_catmatch_dws', true);												$legacy_check = (int) get_post_meta($tmp_id, '_wpu_article_dws', true);												$legacy_check2 = (int) get_post_meta($tmp_id, '_wpu_category_aggregated', true);												if ($check_cat_id):													# if updating existing page													$child_silo_cat_id = $check_cat_id;                                                elseif ($legacy_check):													# legacy fix 1													$child_silo_cat_id = $legacy_check;													update_post_meta($tmp_id, '_wpu_catmatch_dws', (int)$child_silo_cat_id);													delete_post_meta($tmp_id, '_wpu_article_dws');                                                elseif ($legacy_check2):													# legacy fix 2													$child_silo_cat_id = $legacy_check2;													update_post_meta($tmp_id, '_wpu_catmatch_dws', (int)$child_silo_cat_id);													delete_post_meta($tmp_id, '_wpu_category_aggregated');												else:													# fallback if category match is missing													$child_silo_cat_id = get_category_by_slug($child_slug)->term_id;													$child_silo_cat_id = isset($child_silo_cat_id) ? $child_silo_cat_id : 0;													if ($child_silo_cat_id != 0) {														update_post_meta($tmp_id, '_wpu_catmatch_dws', (int)$child_silo_cat_id);													}												endif;												# check if more than 1 page attaches to the category												$dup_catmatch_test = array(													'posts_per_page' => -1,													'meta_key' => '_wpu_catmatch_dws',													'meta_value' => $child_silo_cat_id,													'post_status' => array("draft", "publish", "trash"),													'post_type' => 'page');												$posts_array = new WP_Query ($dup_catmatch_test);												if (($posts_array->found_posts) > 1) {													$count_dup = 0;													foreach ($posts_array->posts as $dup_post) {														$count_dup++;														# make sure the current page is the correct slug match														# check current page slug == catmatch slug														$dup_post_slug = $dup_post->post_name;														$should_match_cat = (get_category_by_slug($dup_post_slug)->term_id);														$should_match_cat = isset($should_match_cat) ? $should_match_cat : 0;														if ($should_match_cat == $child_silo_cat_id) {															continue;														}														else {															update_post_meta($dup_post->ID, '_wpu_catmatch_dws', (int)$should_match_cat);														}													}												}												# check page code is attached to category meta												$check_page_id = get_metadata('term',$child_silo_cat_id, '_wpu_pagematch_dws', true);												if (!$check_page_id)													update_metadata('term', $child_silo_cat_id, '_wpu_pagematch_dws', $tmp_id);												$listing_code .= "<ol class=\"b\">";												$categories = get_categories("child_of=$child_silo_cat_id&hide_empty=0");												if ($categories):													foreach ($categories as $cat) {														$tmp_cat_id = $cat->cat_ID;														# get page matching category														$status_post = get_metadata('term',$tmp_cat_id, '_wpu_pagematch_dws', true);														# if category match is broken, looks for reverse page match, legacy match or page slug. Updates meta connection														if (!$status_post) {															$args = array(																'posts_per_page' => 1,																'meta_key' => '_wpu_catmatch_dws',																'meta_value' => $tmp_cat_id,																'post_status' => array("draft", "publish"),																'post_type' => 'page');															$posts_array = get_posts($args);															$status_post = $posts_array[0]->ID;															if ($status_post)																update_metadata('term', (int)$tmp_cat_id, '_wpu_pagematch_dws', $status_post);															if (!$posts_array){																# legacy check 1 part 1																$args = array(																	'posts_per_page' => 1,																	'meta_key' => '_wpu_article_dws',																	'meta_value' => $tmp_cat_id,																	'post_status' => array("draft", "publish"),																	'post_type' => 'page');																$posts_array = get_posts($args);																if (!$posts_array){																	# legacy check 2 part 1																	$args = array(																		'posts_per_page' => 1,																		'meta_key' => '_wpu_category_aggregated',																		'meta_value' => $tmp_cat_id,																		'post_status' => array("draft", "publish"),																		'post_type' => 'page');																	$posts_array = get_posts($args);																	if (!$posts_array){																		# fallback part 1																		$pagename_constructor = get_category($cat->parent)->slug . "/" . $cat->slug;																		$posts_array = get_page_by_path($pagename_constructor);																		if ($posts_array) {																			# fallback part 2																			$status_post = $posts_array->ID; // note the lack of [0]																			update_post_meta($status_post, '_wpu_catmatch_dws', (int)$tmp_cat_id);																			update_metadata('term', (int)$tmp_cat_id, '_wpu_pagematch_dws', $status_post);																		}																		else {																			delete_metadata('term', $tmp_cat_id, 'tax-order');																			wp_delete_category($tmp_cat_id);																			continue;																		}																	}																	else {																		# legacy check 2 part 2																		$status_post = $posts_array[0]->ID;																		update_post_meta($status_post, '_wpu_catmatch_dws', (int)$tmp_cat_id);																		delete_post_meta($status_post, '_wpu_category_aggregated');																		update_metadata('term', (int)$tmp_cat_id, '_wpu_pagematch_dws', $status_post);																	}																}																else {																	# legacy check 1 part 2																	$status_post = $posts_array[0]->ID;																	update_post_meta($status_post, '_wpu_catmatch_dws', (int)$tmp_cat_id);																	delete_post_meta($status_post, '_wpu_article_dws');																	update_metadata('term', (int)$tmp_cat_id, '_wpu_pagematch_dws', $status_post);																}															}														}														# check if more than 1 page attaches to the category														$dup_catmatch_test = array(															'posts_per_page' => -1,															'meta_key' => '_wpu_catmatch_dws',															'meta_value' => $tmp_cat_id,															'post_status' => array("draft", "publish", "trash"),															'post_type' => 'page');														$posts_array = new WP_Query ($dup_catmatch_test);														if (($posts_array->found_posts) > 1) {															$count_dup = 0;															foreach ($posts_array->posts as $dup_post) {																$count_dup++;																# make sure the current page is the correct slug match																# check current page slug == catmatch slug																$dup_post_slug = $dup_post->post_name;																$should_match_cat = (get_category_by_slug($dup_post_slug)->term_id);																$should_match_cat = isset($should_match_cat) ? $should_match_cat : 0;																if ($should_match_cat == $tmp_cat_id) {																	continue;																}																else {																	update_post_meta($dup_post->ID, '_wpu_catmatch_dws', (int)$should_match_cat);																}															}														}                                                        elseif (($posts_array->found_posts) == 0) {															delete_metadata('term', $tmp_cat_id, '_wpu_pagematch_dws');															delete_metadata('term', $tmp_cat_id, 'tax-order');															wp_delete_category($tmp_cat_id);															continue;														}														if (get_post_status($status_post) == "draft" and $status_post) {															$draftStr = " - <b>draft</b>";														}                                                        elseif (get_post_status($status_post) == "trash" and $status_post) {															$draftStr = " - <b>trash</b>";														}														else {															$draftStr = "";														}														$single_cat_title = get_cat_name($tmp_cat_id);														$titleStr = ($status_post) ? get_the_title($status_post) : $single_cat_title;														query_posts("cat=$tmp_cat_id&posts_per_page=-1&orderby=menu_order&order=ASC");														$listing_code .= "<li><label><input type='radio' name='page_selected' value='page_" . $tmp_cat_id . "'" . checked($page_sel, 'page_' . $tmp_cat_id, false) . " /> <span class='wpus-article'>" . $titleStr . $draftStr . "</span></label>";														$listing_code .= "<ol class=\"c\">";														if (have_posts()):															while (have_posts()): the_post();																if (get_post_status(get_the_ID()) == "draft" and $status_post) {																	$draftStr = " - <b>draft</b>";																}                                                                elseif (get_post_status(get_the_ID()) == "trash" and $status_post) {																	$draftStr = " - <b>trash</b>";																}																else {																	$draftStr = "";																}																$listing_code .= "<li><input type='hidden' name='page' value='" . get_the_ID() . "' /><span class='wpus-article-post'>" . get_the_title() . $draftStr . "</span></li>";															endwhile;														endif;														$listing_code .= "</ol>";														$listing_code .= "</li>";													}												endif;												$listing_code .= "</ol>";												$listing_code .= "</li>";											}										endwhile;										$listing_code .= "</ol>";										$listing_code .= "</div>";										#final housecleaning check										$catmatch_cleaning = get_terms( 'category', 'orderby=id&hide_empty=0&fields=ids' );										if (!$catmatch_cleaning) {										}										else {										}										foreach ($catmatch_cleaning as $cleaning_id) {											if ($cleaning_id == 1) {												continue;											}											$pagematch_id = get_metadata('term',$cleaning_id, '_wpu_pagematch_dws', true);											$pagematch_check = get_post($pagematch_id);											if (!$pagematch_id) {												continue;											}                                            elseif ($pagematch_check) {												continue;											}											else {												delete_metadata('term', $cleaning_id, '_wpu_pagematch_dws');												delete_metadata('term', $cleaning_id, 'tax-order');												wp_delete_category($cleaning_id);											}										}										echo $listing_code;										?>                                    </blockquote>                                </div>                                <p class="submit">                                    <label for="status">Options: <select id="status" name="status" style="float: none; display: block;" onchange="if(this.value=='delete'){alert('WARNING: deleting this will also delete everything underneath it.');}">                                            <option value="draft">Draft</option>                                            <option value="publish">Publish</option>                                            <option value="delete">Delete</option>                                        </select></label>                                    <textarea name="keywords" rows="3"                                              style="width: 300px"><?php echo esc_textarea($text_area); ?></textarea><br/>									<?php submit_button("Make It So", 'primary', 'submit', false); ?>                                </p>                            </div>                        </div>                    </div>                </form>            </div>            <script type="text/javascript" charset="utf-8">                jQuery(document).ready(function ($) {                    // add placeholder to empty lists                    $('.b').each(function (c) {                        // add placeholder if list is empty                        if (0 == $("> li", this).size()) {                            $(this).css('height', '25px')                            // $(this).css('background-color', '#FFAA00')                        }                    })                    // add placeholder to empty lists                    $('.c').each(function (c) {                        // add placeholder if list is empty                        if (0 == $("> li", this).size()) {                            $(this).css('height', '15px')                            // $(this).css('background-color', '#FF0000')                        }                    })                    $('.a').sortable({                        cursor:'move',                        placeholder: 'highlight',                        stop:function (e, ui) {                            var targt = e.originalEvent.target || e.srcElement;                            var parent_id = -1;                            var current_id = $('input:first', targt.innerHTML).val().split('_')[1];                            // set by default                            var previous_id = -1;                            // get previous id                            $('ol:first > li', targt.parentElement.parentElement.outerHTML).each(function (index) {                                if (current_id == $('input:first', this).val().split('_')[1]) {                                    return false                                }                                previous_id = $('input:first', this).val().split('_')[1]                            });                            silo_structure_save_order('a', parent_id, current_id, previous_id)                        }                    });                    $('.b').sortable({                        cursor:'move',                        placeholder: 'highlight',                        connectWith:$('.b'),                        receive:function (e, ui) {                            // remove placeholder                            $(this).css('height', 'auto')                            // $(this).css('background-color', 'transparent')                        },                        stop:function (e, ui) {                            var targt = e.originalEvent.target || e.srcElement                            // remove place holder if list is not empty                            if (0 < $("> li", this).size()) {                                $(this).css('height', 'auto')                                // $(this).css('background-color', 'transparent')                            }                            var parent_id = $('input:first', targt.parentElement.parentElement.parentElement.parentElement.outerHTML).val().split('_')[1]                            var current_id = $('input:first', targt.parentElement.outerHTML).val().split('_')[1]                            // set by default                            var previous_id = -1                            // get previous id                            $('ol:first > li', targt.parentElement.parentElement.parentElement.parentElement.outerHTML).each(function (index) {                                if (current_id == $('input:first', this).val().split('_')[1]) {                                    return false                                }                                previous_id = $('input:first', this).val().split('_')[1]                            })                            silo_structure_save_order('b', parent_id, current_id, previous_id)                        },                        change:function (e, ui) {                            // from list                            if (ui.sender == null) {                                // add placeholder if list is empty                                if (1 == $("> li", this).size()) {                                    $(this).css('height', '25px')                                    // $(this).css('background-color', '#FFAA00')                                }                            }                        }                    });                    $('.c').sortable({                        cursor:'move',                        connectWith:$('.c'),                        placeholder: 'highlight',                        receive:function (e, ui) {                            // remove placeholder                            $(this).css('height', 'auto')                            // $(this).css('background-color', 'transparent')                        },                        stop:function (e, ui) {                            var targt = e.originalEvent.target || e.srcElement                            // remove place holder if list is not empty                            if (0 < $("> li", this).size()) {                                $(this).css('height', 'auto')                                // $(this).css('background-color', 'transparent')                            }                            var parent_id = $('input:first', targt.parentElement.parentElement.parentElement.outerHTML).val().split('_')[1]                            var current_id = $('input:first', targt.parentElement.outerHTML).val()                            // set by default                            var previous_id = -1                            // get previous id                            $('ol:first > li', targt.parentElement.parentElement.parentElement.outerHTML).each(function (index) {                                if (current_id == $('input:first', this).val()) {                                    return false                                }                                previous_id = $('input:first', this).val()                            })                            silo_structure_save_order('c', parent_id, current_id, previous_id)                        },                        change:function (e, ui) {                            // from list                            if (ui.sender == null) {                                // add placeholder if list is empty                                if (1 == $("> li", this).size()) {                                    $(this).css('height', '15px')                                    // $(this).css('background-color', '#FF0000')                                }                            }                        }                    });                    function silo_structure_reorder_post_callback(resp){                        jQuery("#reordering-pane").removeClass("reorder-loading");                    }                    function silo_structure_save_order(type, parent_id, current_id, previous_id) {                        if ('a' == type) {                            type = 'silo'                        }                        else if ('b' == type) {                            type = 'cat'                        }                        else if ('c' == type) {                            type = 'page'                        }                        jQuery("#reordering-pane").addClass("reorder-loading");                        var data = {                            action:'silo_structure_manual_sorting',                            _ajax_nonce:'<?php echo wp_create_nonce(plugin_basename(__FILE__)) ?>',                            type:type,                            parent_id:parent_id,                            current_id:current_id,                            previous_id:previous_id                        };                        // since 2.8 ajaxurl is always defined in the admin header and points to admin-ajax.php                        $.post(ajaxurl, data, silo_structure_reorder_post_callback);                    }                });            </script>			<?php		}		public function silo_structure_manual_sorting_callback()		{			check_ajax_referer(plugin_basename(__FILE__), '_ajax_nonce');			# die if required variables are not set			if (!isset($_POST['type'], $_POST['parent_id'], $_POST['current_id'], $_POST['previous_id'])) {				die;			}			# set variables			$parent_id = (int)$_POST['parent_id'];			$current_id = (int)$_POST['current_id'];			$previous_id = (int)$_POST['previous_id'];			# SILO			if ('silo' == $_POST['type']) {				$args = array(					'posts_per_page'   => -1,					'orderby'          => 'menu_order',					'order'            => 'ASC',					'exclude'          => $current_id,					'meta_key'         => '_wpu_silo_dws',					'post_type'        => 'page',					'post_parent'      => 0,					'post_status'      => array('publish', 'draft'),					'suppress_filters' => true );				$pages = get_posts($args);				# if no cats belong to this parent				if (0 == count($pages)) {					# set page to 0 menu order					remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);					wp_update_post(array('ID' => $current_id, 'menu_order' => 0));					add_action('save_post', array($this, 'silostructure_save_postdata'), 11);				} # set correct menu order for pages				else {					# get all page ids					$page_ids = array();					foreach ($pages as $v) {						$page_ids[] = $v->ID;					}					# if it's put first in front of other cats					if (-1 == $previous_id) {						# prepend to the beginning of the arrays						array_unshift($page_ids, $current_id);					} # if it's put in between or at the end					else {						# get previous id key						if (false === ($previous_id_key = array_search($previous_id, $page_ids))) {							# if not found, there is an error							die;						}						# add after previous page						array_splice($page_ids, $previous_id_key + 1, 0, $current_id);					}					$check_cat_id = (int) get_post_meta($v, '_wpu_catmatch_dws', true);					if ($check_cat_id)						$exist = term_exists($check_cat_id, 'category');					if ($exist)						update_metadata('term', $exist['term_id'], 'tax-order', $k);					# set proper menu order for each page					foreach ($page_ids as $k => $v) {						$k += 1;						# update page						remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);						wp_update_post(array('ID' => $v, 'menu_order' => $k));						add_action('save_post', array($this, 'silostructure_save_postdata'), 11);						# update matching category order						$check_cat_id = (int) get_post_meta($v, '_wpu_catmatch_dws', true);						if ($check_cat_id)							$exist = term_exists($check_cat_id, 'category');						if ($exist)							update_metadata('term', $exist['term_id'], 'tax-order', $k);					}				}			} # CATEGORY			else if ('cat' == $_POST['type']) {				# get child category by id				if (null == ($child_cat = get_category($current_id)))					die;				# get parent category				if (null == ($parent_cat = get_category($child_cat->parent)))					die;				# get the page				$args = array(					'post_type' => 'page',					'posts_per_page' => 1,					'post_status' => array("draft", "publish"),					'meta_query' => array(						array(							'key' => '_wpu_catmatch_dws',							'value' => $current_id,							'compare' => '=',						)					)				);				$pages = get_posts($args);				$page = $pages[0];				if (count($pages) == 0)					die;				# get parent page				if (null == ($parent_page = get_post($parent_id)))					die;				# get new parent category				if (false === ($new_parent_cat = get_category_by_slug($parent_page->post_name))){					$new_parent_cat_id = get_post_meta($parent_page->ID, '_wpu_catmatch_dws', true);					if (null == ($new_parent_cat = get_category($new_parent_cat_id)))						die;				}				# set new parent				remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);				wp_update_post(array('ID' => $page->ID, 'post_parent' => $parent_id));				add_action('save_post', array($this, 'silostructure_save_postdata'), 11);				wp_update_term($child_cat->term_id, 'category', array('parent' => $new_parent_cat->term_id));				$cats = get_categories(array('parent' => $new_parent_cat->term_id, 'hide_empty' => false, 'exclude' => $current_id));				$pages = get_pages("parent=$parent_page->ID&hierarchical=0&sort_column=menu_order&sort_order=ASC&exclude=$page->ID");				# if no cats belong to this parent				if (0 == count($cats)) {					# set cat and page to 0 menu order					update_metadata('term', $current_id, 'tax-order', 0);					remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);					wp_update_post(array('ID' => $page->ID, 'menu_order' => 0));					add_action('save_post', array($this, 'silostructure_save_postdata'), 11);				} # set correct menu order for categories and pages				else {					$previous_page_slug = '';					# get all cat ids					$page_ids = array();					$cat_ids = array();					foreach ($cats as $v) {						# get previous page slug						$cat_ids[] = $v->term_id;						$page_ids[] = get_metadata('term',$v->term_id, '_wpu_pagematch_dws', true);					}					# get page id for previous					$previous_page_id = get_metadata('term',$previous_id, '_wpu_pagematch_dws', true);					# if it's put first in front of other cats					if (-1 == $previous_id) {						# prepend to the beginning of the arrays						array_unshift($cat_ids, $current_id);						array_unshift($page_ids, $page->ID);					} # if it's put in between or at the end					else {						# get previous id key						if (false === ($previous_id_key = array_search($previous_id, $cat_ids))) {							# if not found, there is an error							die;						}						# add after previous cat						array_splice($cat_ids, $previous_id_key + 1, 0, $current_id);						# get previous page id key						if (false === ($previous_page_id_key = array_search($previous_page_id, $page_ids))) {							# if not found, there is an error							die;						}						# add after previous page						array_splice($page_ids, $previous_page_id_key + 1, 0, $page->ID);					}					# set proper menu order for each cat					foreach ($cat_ids as $k => $v) {						# update cat						update_metadata('term', $v, 'tax-order', $k + 1);					}					# set proper menu order for each page					foreach ($page_ids as $k => $v) {						# update page						$k += 1;						remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);						wp_update_post(array('ID' => $v, 'menu_order' => $k));						add_action('save_post', array($this, 'silostructure_save_postdata'), 11);						$check_cat_id = (int) get_post_meta($v, '_wpu_catmatch_dws', true);						if ($check_cat_id)							$exist = term_exists($check_cat_id, 'category');						if ($exist)							update_metadata('term', $exist['term_id'], 'tax-order', $k);					}				}			} # PAGE			else if ('page' == $_POST['type']) {				# set the new category first				wp_set_post_categories($current_id, array($parent_id));				# set the correct menu order				$posts = get_posts("category=$parent_id&post_status=any&posts_per_page=-1&orderby=menu_order&order=ASC&post__not_in[]=$current_id");				# if no posts belong to this parent				if (0 == count($posts)) {					# update post					remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);					wp_update_post(array('ID' => $current_id, 'menu_order' => 0));					add_action('save_post', array($this, 'silostructure_save_postdata'), 11);				} # set correct menu order for all posts				else {					# get all post ids					$post_ids = array();					foreach ($posts as $v) {						$post_ids[] = $v->ID;					}					# if it's put first in front of other posts					if (-1 == $previous_id) {						# prepend to the beginning of the array our post						array_unshift($post_ids, $current_id);					} # if it's put in between or at the end					else {						# get previous id key						if (false === ($previous_id_key = array_search($previous_id, $post_ids))) {							# if not found, there is an error							die;						}						# add after previous post						array_splice($post_ids, $previous_id_key + 1, 0, $current_id);					}					# set proper menu order for each post					foreach ($post_ids as $k => $v) {						# update post						$k += 1;						remove_action('save_post', array($this, 'silostructure_save_postdata'), 11);						wp_update_post(array('ID' => $v, 'menu_order' => $k));						add_action('save_post', array($this, 'silostructure_save_postdata'), 11);					}				}			}			echo "";			exit;		}		function wpu_silo_load_script()		{			wp_enqueue_script('jquery');			wp_enqueue_script('wpu-silo-colorpicker');			wp_enqueue_script('wpu-silo-script');			wp_enqueue_script('jquery-ui-sortable');		}		function wpu_silo_load_style()		{			wp_enqueue_style('wpu-silo-bootstrap-css');			wp_enqueue_style('wpu-silo-colorpicker');			wp_enqueue_style('wpu-silo-plugin-css');		}		function create_style_admin()		{			$current_user = wp_get_current_user();			if (isset($_POST['styleSubmit'])) {				if ($this->wpu_theme_should_update_settings()) {					check_admin_referer('wpus-silo-style-setup');					$wpus_use_silo_styles = $_POST['wpus_use_silo_styles'];					if ($wpus_use_silo_styles) $this->_silo_styles['wpus_use_silo_styles'] = $wpus_use_silo_styles;					$wlc = $_POST['wpus-link-color'];					if ($wlc) $this->_silo_styles['link_color'] = $wlc;					$wls = $_POST['wpus-link-size'];					if ($wls) $this->_silo_styles['link_size'] = $wls;					$lst = $_POST['wpus-link-size-type'];					if ($lst) $this->_silo_styles['link_size_type'] = $lst;					$wlh = $_POST['wpus-line-height'];					if ($wlh) $this->_silo_styles['line_height'] = $wlh;					update_option(WPUS_PLUGIN_STYLES, maybe_unserialize($this->_silo_styles));					echo '<div id="message" class="updated fade"><p>' . __('Silos have been configured.', WPUS_TXT_DOMAIN) . '</p></div>';				} //endif wpu_theme_should_update_settings			} // end Advanced Import DB Update			?>            <div id="wpu-header">                <h2><?php _e(WPUS_THEME_NAME . " Styles", WPUS_TXT_DOMAIN); ?></h2>            </div>            <div id="wpus-styles">                <div id="wpu_silo_advanced_setup" class="wrap">                    <h2><?php _e('Silo Enhanced Styles', WPUS_TXT_DOMAIN); ?></h2>                    <form name="wpu_silo_advanced_setup" method="post" class="form-horizontal">                        <input type="hidden" name="<?php echo WPUS_THEME_SUBMITTED_FIELD; ?>" value="Y"/>                        <div id="col-container">                            <div id="col-left" style="width: 65%">                                <script type="text/javascript">                                    jQuery(document).ready(function () {                                        jQuery("#wpus_use_silo_styles").change(function () {                                            jQuery("#for-silo-style").toggle("normal");                                        });                                    });                                </script>                                <div class="control-group">                                    <label class="control-label" for="wpus-use-silo-styles">Use Silo Styles</label>                                    <div class="controls">                                        <div class="">											<?php $wpus_use_silo_styles = (isset($this->_silo_styles['wpus_use_silo_styles']) ? $this->_silo_styles['wpus_use_silo_styles'] : "no");											$wpus_use_silo_styles_block = (($wpus_use_silo_styles == "no") ? " display:none; " : "");											?>                                            <select class="input-medium" name="wpus_use_silo_styles"                                                    id="wpus_use_silo_styles">                                                <option value="no"<?php if ($wpus_use_silo_styles != 'yes') echo ' selected'; ?>>                                                    No                                                </option>                                                <option value="yes"<?php if ($wpus_use_silo_styles == 'yes') echo ' selected'; ?>>                                                    Yes                                                </option>                                            </select>                                        </div>                                    </div>                                </div>                                <div id="for-silo-style" style="<?php echo $wpus_use_silo_styles_block;?>">                                    <div class="control-group">                                        <label class="control-label" for="inputEmail">Silo Link Color</label>                                        <div class="controls">                                            <div class="input-append">                                                <input name="wpus-link-color" class="input-small color-picker"                                                       value="<?php if ($this->_silo_styles['link_color']) echo $this->_silo_styles['link_color']; ?>">                                            </div>                                        </div>                                    </div>                                    <div class="control-group">                                        <label class="control-label" for="inputEmail">Silo Link Size</label>                                        <div class="controls">                                            <input name="wpus-link-size" id="wpus-link-size" class="input-small"                                                   placeholder="13"                                                   value="<?php if ($this->_silo_styles['link_size']) echo $this->_silo_styles['link_size']; ?>">											<?php if ($this->_silo_styles['link_size_type']) $size_type = $this->_silo_styles['link_size_type']; ?>                                            <select class="input-mini" name="wpus-link-size-type" id="wpus-link-size-type">                                                <option value="px"<?php if ($size_type == 'px') echo ' selected'; ?>>px                                                </option>                                                <option value="em"<?php if ($size_type == 'em') echo ' selected'; ?>>em                                                </option>                                                <option value="pt"<?php if ($size_type == 'pt') echo ' selected'; ?>>pt                                                </option>                                            </select>                                        </div>                                    </div>                                    <div class="control-group">                                        <label class="control-label" for="inputEmail">Silo Line-height</label>                                        <div class="controls">                                            <input name="wpus-line-height" id="wpus-line-height" class="input-medium"                                                   placeholder="Default 1.5"                                                   value="<?php if ($this->_silo_styles['line_height']) echo $this->_silo_styles['line_height']; ?>">                                        </div>                                    </div>                                </div>                                <div class="control-group" style="margin-top: 10px; ">                                    <div class="controls">                                        <input type='submit' name="styleSubmit" id="styleSubmit" class='button-primary'                                               value='Save Changes'/>                                        <button id="wpu-reset-styles" class="btn btn-small" type="button">Reset</button>										<?php wp_nonce_field('wpus-silo-style-setup'); ?>                                    </div>                                </div>                            </div>                        </div>                    </form>                </div>                <!-- end #wpu-advanced -->            </div>			<?php		} // end create_silo_admin		function create_silo_setting()		{			$current_user = wp_get_current_user();			if (isset($_POST['settingsSubmit'])) {				if ($this->wpu_theme_should_update_settings()) {					check_admin_referer('wpus-silo-settings-setup');					$this->_silo_options['silo_title'] = $_POST['silo-title'];					$this->_silo_options['wpu_blogroll_frontpage'] = (isset($_POST['wpu_blogroll_frontpage']) ? $_POST['wpu_blogroll_frontpage'] : 0);					$this->_silo_options['wpu_use_other_seo'] = (isset($_POST['wpu_use_other_seo']) ? $_POST['wpu_use_other_seo'] : 0);					update_option(WPUS_PLUGIN_OPTIONS, maybe_unserialize($this->_silo_options));					echo '<div id="message" class="updated fade"><p><strong>' . __('Silo settings saved.', WPUS_TXT_DOMAIN) . '</strong></p></div>';				}			} else {				$this->_silo_options['wpu_blogroll_frontpage'] = ((isset($this->_silo_options['wpu_blogroll_frontpage']) || array_key_exists('wpu_blogroll_frontpage', $this->_silo_options)) ? $this->_silo_options['wpu_blogroll_frontpage'] : $this->_silo_options['wpu_blogroll_frontpage'] = 0);				$this->_silo_options['wpu_use_other_seo'] = ((isset($this->_silo_options['wpu_use_other_seo']) || array_key_exists('wpu_use_other_seo', $this->_silo_options)) ? $this->_silo_options['wpu_use_other_seo'] : $this->_silo_options['wpu_use_other_seo'] = 0);			}			?>            <div id="wpu-header">                <h2><?php _e(WPUS_THEME_NAME . " Settings", WPUS_TXT_DOMAIN); ?></h2>            </div>            <form name="wpu_silo_setting_setup" method="post" class="form-horizontal">                <div id="col-container">                    <div id="col-left" style="width: 85%">                        <input type="hidden" name="<?php echo WPUS_THEME_SUBMITTED_FIELD; ?>" value="Y"/>                        <div class="control-group">                            <strong>To Add Silo Links to a Main Silo Page, Add the shortcode: </strong><br>                            <div align="left" class="controls"><br>                                <input size="60" type="text" value="[wpu_silo links='10']" id="su_silo_short">                                <button onclick="su_silo_copy()">Copy Shortcode to Clipboard</button>                            </div>                            <script>                                function su_silo_copy() {                                    var copyText = document.getElementById("su_silo_short");                                    copyText.select();                                    document.execCommand("copy");                                    alert("Copied Shortcode to Clipboard: " + copyText.value);                                }                            </script>                        </div>                        <div class="control-group">                            <strong>To enable excerpts below links: </strong><br>                            <div align="left" class="controls"><br>                                <input size="60" type="text" value="[wpu_silo excerpt='true' links='10']" id="su_silo_short2">                                <button onclick="su_silo_copy2()">Copy Shortcode to Clipboard</button>                            </div>                            <script>                                function su_silo_copy2() {                                    var copyText = document.getElementById("su_silo_short2");                                    copyText.select();                                    document.execCommand("copy");                                    alert("Copied Shortcode to Clipboard: " + copyText.value);                                }                            </script>                        </div>                        <div class="control-group">                            <label class="control-label" for="silo-title"><strong>Menu Heading:</strong></label>                            <div class="controls">                                <input type="text" class="input-large" name="silo-title" id="silo-title"                                       value='<?php echo $this->_silo_options['silo_title']; ?>'/>                            </div>                        </div>                        <div class="control-group">                            <label class="control-label">Blogroll on Front Page:</label>                            <div class="controls">                                <input name="wpu_blogroll_frontpage" type="checkbox" value="1" <?php checked( $this->_silo_options['wpu_blogroll_frontpage'], '1' ); ?> />                            </div>                        </div>                        <div class="control-group">                            <div class="controls">                                <input name="wpu_use_other_seo" type="hidden"                                       value="1" checked/>                            </div>                        </div>                        <div class="control-group">                            <div class="controls">                                <input type='submit' name="settingsSubmit" id="settingsSubmit" class='button-primary'                                       value='Update Settings'/>								<?php wp_nonce_field('wpus-silo-settings-setup'); ?>                            </div>                        </div>                    </div>            </form>            </div>			<?php		}		function create_silo_map()		{			global $title;			?>            <div class="wrap">                <h2><?php echo esc_html($title) ?></h2>                <style type="text/css">                    h5 {                        font-size: 16px;                        color: #000                    }                    h6 {                        font-size: 14px;                        color: #222;                    }                    .wpus-siloing ul {                        color: #333;                        margin: 5px 20px;                        list-style: disc outside none;                        display: list-item;                    }                    .wpus-siloing ol.a li {                        list-style-type: decimal;                    }                    .wpus-siloing ol.b li {                        list-style-type: lower-alpha;                    }                    .wpus-siloing ol.c li {                        list-style-type: lower-roman;                    }                    .wpus-article {                        color: #444;                    }                    .wpus-article-post {                        color: #777;                    }                </style>				<?php   $args = array(					'post_type' => 'page',					'meta_key' => '_wpu_silo_dws',					'posts_per_page' => -1,					'orderby' => 'menu_order',					'order' => 'ASC'				);				$silo_pages = new WP_Query($args);				$listing_code = "";				$listing_code .= "<a href='" . plugin_dir_url(__FILE__) . "export-silo-map.php?_wpnonce=" . wp_create_nonce("export-silo") . "' class='button'>Export Silo Map</a>&nbsp;&nbsp;&nbsp;";				$listing_code .= "<div class='wpus-siloing'>";				$listing_code .= "<h5>" . $this->_silo_options['silo_title'] . "</h5>";				$listing_code .= "<ol class='wpus-silos a'>";				while ($silo_pages->have_posts()): $silo_pages->the_post();					$tmp_id = get_the_ID();					$parent_id = get_post()->post_parent;					$child_slug = get_post_field('post_name',$tmp_id);					if ($parent_id == 0):						$draftStr = (get_post_status(get_the_ID()) == "draft") ? " - <b>draft</b>" : "";						$listing_code .= "<li>";						$listing_code .= "<h6>" . get_the_title() . $draftStr . "</h6>";						# get the id of the category attached to the page						$art_cat = get_post_meta($tmp_id, '_wpu_catmatch_dws', true);						if ($art_cat)							$child_silo_cat_id = $art_cat;						$categories = get_categories("child_of=$child_silo_cat_id&hide_empty=0");						if ($categories):							$listing_code .= "<ol class=\"b\">";							foreach ($categories as $cat) {								$listing_code .= "<li>";								$args = array(									'posts_per_page' => 1,									'meta_key' => '_wpu_catmatch_dws',									'meta_value' => $cat->cat_ID,									'post_status' => array("draft", "publish"),									'post_type' => 'page');								$posts_array = get_posts($args);								$status_post = $posts_array[0];								$draftStr = (get_post_status($status_post->ID) == "draft" and $status_post) ? " - <b>draft</b>" : " ";								$single_cat_title = get_cat_name($cat->cat_ID);								$titleStr = ($status_post) ? get_the_title($status_post->ID) : $single_cat_title;								query_posts("cat=$cat->cat_ID&posts_per_page=-1&orderby=menu_order&order=ASC");								$listing_code .= "<span class='wpus-article'>" . $titleStr . $draftStr . "</span>";								if (have_posts()):									$listing_code .= "<ol class=\"c\">";									while (have_posts()) : the_post();										$draftStr = (get_post_status(get_the_ID()) == "draft") ? " - <b>draft</b>" : "";										$listing_code .= "<li><span class='wpus-article-post'>" . get_the_title() . $draftStr . "</span></li>";									endwhile;									$listing_code .= "</ol>";								endif;								$listing_code .= "</li>";							}							$listing_code .= "</ol>";						endif;						$listing_code .= "</li>";					endif;				endwhile;				$listing_code .= "</ol>";				$listing_code .= "</div>";				echo $listing_code;				?>            </div>			<?php		}		function wpu_theme_should_update_settings()		{			if (!current_user_can('activate_plugins'))				wp_die(__("Insufficient user privileges.", WPUS_TXT_DOMAIN));			if ($_POST[WPUS_THEME_SUBMITTED_FIELD] == 'Y') {				unset($_POST[WPUS_THEME_SUBMITTED_FIELD]);				return true;			}			return false;		}		/**		 * Create Silo Admin init		 */		public function create_silo_admin_init()		{			$location = 'admin.php?page=wpu-silo-importer';			$error = '';			$current_user = wp_get_current_user();			if (isset($_POST['advancedSubmit'])) {				$xmlFiles = $_FILES['settingsfile'];				if (!count($xmlFiles['name'])) {					$error = "You should select a file to import.";				} elseif ($this->wpu_theme_should_update_settings()) {					check_admin_referer('wpus-silo-advanced-setup');					$file = $_FILES['settingsfile']['tmp_name'];					foreach ($xmlFiles['tmp_name'] as $fileorder => $file) {						$import = $this->import_advanced_xml($file);						if ($import === false) {							$error = __('Silos could not upload file. Please try again.', WPUS_TXT_DOMAIN);						} else {							$this->_silo_options['status'] = (isset($_POST['wpu-post-status']) ? $_POST['wpu-post-status'] : 'draft');							$this->_silo_options['shortcode'] = (isset($_POST['wpu-post-shortcode']) ? $_POST['wpu-post-shortcode'] : 0);							$this->_silo_options['shortcode-body'] = (isset($_POST['wpu-post-shortcode-body']) ? $_POST['wpu-post-shortcode-body'] : "[wpu_silo links='10']");							$this->_silo_options['silo-title'] = (isset($_POST['wpu-silo-title']) ? $_POST['wpu-silo-title'] : '');							$this->_silo_options['silo-slug'] = (isset($_POST['wpu-silo-slug']) ? $_POST['wpu-silo-slug'] : '');							$this->_silo_options['article-title'] = (isset($_POST['wpu-article-title']) ? $_POST['wpu-article-title'] : '');							$this->_silo_options['article-slug'] = (isset($_POST['wpu-article-slug']) ? $_POST['wpu-article-slug'] : '');							$this->_silo_options['longtail-title'] = (isset($_POST['wpu-altail-title']) ? $_POST['wpu-altail-title'] : '');							$this->_silo_options['longtail-slug'] = (isset($_POST['wpu-altail-slug']) ? $_POST['wpu-altail-slug'] : '');							$body_linknumber = (isset($_POST['wpu-post-shortcode-body-linknumber']) ? $_POST['wpu-post-shortcode-body-linknumber'] : '10');							$body_excerpt = (isset($_POST['wpu-post-shortcode-body-excerpt']) ? $_POST['wpu-post-shortcode-body-excerpt'] : '');							$body_thumbnails = (isset($_POST['wpu-post-shortcode-body-thumbnails']) ? $_POST['wpu-post-shortcode-body-thumbnails'] : '');							$body_breadcrumbs = (isset($_POST['wpu-post-shortcode-body-breadcrumbs']) ? $_POST['wpu-post-shortcode-body-breadcrumbs'] : '');							update_option('_wpu_silo_advanced',array(									'wpu-post-shortcode-body' => $this->_silo_options['shortcode-body'],									'wpu-post-shortcode-body-linknumber' => $body_linknumber,									'wpu-post-shortcode-body-excerpt' => $body_excerpt,									'wpu-post-shortcode-body-thumbnails' => $body_thumbnails,									'wpu-post-shortcode-body-breadcrumbs' => $body_breadcrumbs								)							);							$refs = array();							$list = array();							# Loop through xml nodes, Creates an Array to work with imported data in a Parent/Child Structure.							foreach ($import as $key => $row) {								$thisref = &$refs[(int)$row['k_id']];								$thisref['dws_id'] = (int)$row['dws_id'];								$thisref['parent_id'] = (int)$row['p_id'];								$thisref['name'] = (string)$row['page_name'];								$thisref['title'] = (string)$row['title'];								$thisref['article_headline'] = (string)$row['article_headline'];								$thisref['meta_key'] = (string)$row['meta_key'];								$thisref['meta_description'] = (string)$row['meta_description'];								$thisref['article_synopsis'] = (string)$row['article_synopsis'];								$thisref['silo_flag'] = (string)$row['silo_flag'];								$thisref['default_page_order'] = (int)$row['default_page_order'];								$thisref['silo_navorder'] = (int)$row['silo_navorder'];								$thisref['date_created'] = (string)$row['date_created'];								$thisref['date_projection'] = (string)$row['date_projection'];								$thisref['days_modification'] = (string)$row['days_modification'];								$thisref['article'] = (string)$row['article'];								if ($row['silo_flag'] == "Silo") {									$list[(int)$row['k_id']] = &$thisref;								} else {									$refs[(int)$row['p_id']]['children'][(int)$row['k_id']] = &$thisref;									$list[(int)$row['p_id']]['children'][(int)$row['k_id']] = &$thisref;								} //end if							} // end foreach							# INTERVAL BETWEEN FILES							$number_sec = count($import) * 4; //4 sec of time for each item to add							# import file in the background							$args = array(								'_FILES' => $_FILES,								'_POST' => $_POST,								'current_user_id' => $current_user->ID,								'list' => $list,							);							wp_schedule_single_event(time() + $fileorder * $number_sec, 'silo-import', array($args));							// $this->processSiloImport($args);							update_option(WPUS_PLUGIN_OPTIONS, maybe_unserialize($this->_silo_options));						}					} //end foreach file;					if (!$error) {						$location = add_query_arg('message', 1, $location);						wp_redirect($location);						die;					}				} //endif wpu_theme_should_update_settings			} // end Advanced Import DB Update			$this->variables_buffer = array(				'error' => $error,			);		}		function create_silo_admin()		{			# extract variables from buffer			extract($this->variables_buffer);			$message = '';			if (!empty($_GET['message']) && '1' == $_GET['message']) {				$message = __('Silos are being imported... ', WPUS_TXT_DOMAIN)." ".__('This may take up to several minutes depending on your file size. ', WPUS_TXT_DOMAIN);			}			# fetch advanced options			$silo_adv_options = get_option('_wpu_silo_advanced');			?>			<?php if ($message): ?>            <div id="message" class="updated fade"><p><?php echo $message ?></p></div>		<?php endif; ?>			<?php if ($error): ?>            <div id="message" class="error fade"><p><strong><?php echo $error ?></strong></p></div>		<?php endif; ?>            <style type="text/css">#advSilo {font-size: 12px;}</style>            <div id="wpu-header">                <h2><?php _e(WPUS_THEME_NAME . " Import", WPUS_TXT_DOMAIN); ?></h2>            </div>            <div id="wpus-advanced">                <div id="wpu_silo_advanced_setup" class="wrap">                    <h2><?php _e('Advanced Silo Import', WPUS_TXT_DOMAIN); ?></h2>					<?php					if(detect_brdcrmb_in_widget()){?>                        <div class="update-nag">You have an active widget <a href="<?php echo admin_url();?>widgets.php">set to display breadcrumbs</a>. To show breadcrumbs in the shortcode, turn off breadcrumbs in the widget.</div>					<?php } ?>                    <form name="wpu_silo_advanced_setup" method="post" enctype='multipart/form-data' class="form-horizontal" action="admin.php?page=wpu-silo-importer">                        <input type="hidden" name="<?php echo WPUS_THEME_SUBMITTED_FIELD; ?>" value="Y"/>                        <div id="col-container">                            <div id="col-left" style="width: 65%">                                <div class="control-group">                                    <label class="control-label" for="inputEmail">Set imported posts to:</label>                                    <div class="controls">                                        <select class="input-small" name="wpu-post-status" id="wpu-post-status">                                            <option value="draft"<?php selected($this->_silo_options['status'], 'draft'); ?>>                                                Draft                                            </option>                                            <option value="publish"<?php selected($this->_silo_options['status'], 'publish'); ?>>                                                Publish                                            </option>                                        </select>                                    </div>                                </div>                                <div class="control-group">                                    <label class="control-label" for="inputEmail">Add Silo Shortcode to Content                                        Body:</label>                                    <div class="controls">                                        <select class="input-small" name="wpu-post-shortcode" id="wpu-post-shortcode">                                            <option value="0"<?php selected($this->_silo_options['shortcode'], '0'); ?>>                                                Off                                            </option>                                            <option value="1"<?php selected($this->_silo_options['shortcode'], '1'); ?>>On                                            </option>                                        </select>                                    </div>                                </div>                                <script type="text/javascript">                                    function rebuildShortcodeBody() {                                        var shortcodeBody = "[wpu_silo links='" + jQuery("#wpu-post-shortcode-body-linknumber").val() + "'";                                        if (jQuery("#wpu-post-shortcode-body-excerpt").prop("checked")) {                                            shortcodeBody += " excerpt='true'";                                        }                                        if (jQuery("#wpu-post-shortcode-body-thumbnails").prop("checked")) {                                            shortcodeBody += " show_thumbnails='true'";                                        }                                        if (jQuery("#wpu-post-shortcode-body-breadcrumbs").prop("checked")) {                                            shortcodeBody += " breadcrumbs='true'";                                        }                                        shortcodeBody += " ]";                                        jQuery("#wpu-post-shortcode-body").val(shortcodeBody);                                    }                                    jQuery(document).ready(function () {                                        jQuery("#wpu-post-shortcode").change(function () {                                            jQuery(".for-shortcode-body").toggle("normal");                                        });                                        jQuery("#wpu-post-shortcode-body-excerpt, #wpu-post-shortcode-body-thumbnails, #wpu-post-shortcode-body-breadcrumbs, #wpu-post-shortcode-body-linknumber").change(function () {                                            rebuildShortcodeBody();                                        });                                    });                                </script>                                <div class="control-group for-shortcode-body"                                     style="<?php if ($this->_silo_options['shortcode'] != "1") echo "display: none;"?>">                                    <label class="control-label" for="wpu-post-shortcode-body">Silo Shortcode Body:</label>                                    <style type="text/css">.inline-label{display: inline-block !important;}</style>                                    <div class="controls">                                        <input type="text" class="input-medium" name="wpu-post-shortcode-body" id="wpu-post-shortcode-body" value="<?php echo ($silo_adv_options['wpu-post-shortcode-body'] ? wp_unslash($silo_adv_options['wpu-post-shortcode-body']) : "[wpu_silo links='10']");?>" style="height:30px;width:560px;"><br>                                        <label for="wpu-post-shortcode-body-excerpt" class="inline-label">Show Excerpt:                                            <input type="checkbox" name="wpu-post-shortcode-body-excerpt" value="yes" id="wpu-post-shortcode-body-excerpt" <?php checked("yes", $silo_adv_options['wpu-post-shortcode-body-excerpt'])?>></label><br>                                        <label for="wpu-post-shortcode-body-thumbnails" class="inline-label">Show Thumbnails:                                            <input type="checkbox" name="wpu-post-shortcode-body-thumbnails" value="yes" id="wpu-post-shortcode-body-thumbnails" <?php checked("yes", $silo_adv_options['wpu-post-shortcode-body-thumbnails'])?>></label><br>                                        <label for="wpu-post-shortcode-body-breadcrumbs" class="inline-label">Show Breadcrumbs:                                            <input type="checkbox" name="wpu-post-shortcode-body-breadcrumbs" value="yes" id="wpu-post-shortcode-body-breadcrumbs" <?php checked("yes", $silo_adv_options['wpu-post-shortcode-body-breadcrumbs'])?>></label><br>                                        <label for="wpu-post-shortcode-body-linknumber" class="inline-label">Number of links:                                            <input type="number" name="wpu-post-shortcode-body-linknumber" id="wpu-post-shortcode-body-linknumber" value="<?php echo ($silo_adv_options['wpu-post-shortcode-body-linknumber'] ? (int) $silo_adv_options['wpu-post-shortcode-body-linknumber'] : '10');?>" min="0" step="1" style="width:60px;height:27px;"></label><br>                                        <script type="text/javascript">                                            jQuery(document).ready(function(){                                                jQuery("#wpu-post-shortcode-body-excerpt, #wpu-post-shortcode-body-thumbnails, #wpu-post-shortcode-body-breadcrumbs, #wpu-post-shortcode-body-linknumber").change(function(){                                                    var value = jQuery(this).val();                                                    var type = jQuery(this).attr("type");                                                    var name = jQuery(this).attr("name");                                                    var bodyval = jQuery("#wpu-post-shortcode-body").val();                                                    var checked = false;                                                    var is_checkbox = (type == "checkbox");                                                    if(is_checkbox){                                                        checked = jQuery(this).is(":checked");                                                    }                                                    if(is_checkbox){                                                        value = (checked)?"yes":"no";                                                    }                                                    jQuery.post(ajaxurl,{                                                        action: "wpu_ajax_save_shortcode_body",                                                        name: name,                                                        value: value,                                                        bodyval: bodyval                                                    },function(){})                                                });                                            });                                        </script>                                    </div>                                </div>                                <div class="control-group">                                    <label class="control-label" for="inputEmail">You may import a Silo XML file stored on your computer here:</label>                                    <div class="controls">                                        <input name='settingsfile[]' type='file' accept='text/xml' multiple="multiple" max="20" style="padding:0;"/>                                    </div>                                </div>                                <div class="control-group">                                    <label class="control-label" for="inputEmail"><a id="advSilo" href="javascript:void(0)">Advanced Silo Settings</a></label>                                    <div id="advanced-silo" class="controls" style="display:none;">                                        <table class="widefat" cellspacing="0">                                            <thead>                                            <tr>                                                <th scope="col" align="left"><a href="javascript:void(0)" id="advReset" class="btn btn-mini btn-inverse">Reset to Defaults</a></th>                                                <th scope="col" align="left">Title</th>                                                <th scope="col" align="left">Slug</th>                                            </tr>                                            </thead>                                            <tbody>                                            <tr>                                                <th><strong>Silo</strong></th>                                                <td><select class="input-medium" name="wpu-silo-title" id="wpu-silo-title">                                                        <option value="primary_keyword_pagename"<?php selected($this->_silo_options['silo-title'], 'primary_keyword_pagename'); ?>>Primary Keyword</option>                                                        <option value="page_title"<?php selected($this->_silo_options['silo-title'], 'page_title'); ?>>Page Title</option>                                                        <option value="Article_headline"<?php selected($this->_silo_options['silo-title'], 'Article_headline'); ?>>Article Headline</option>                                                    </select></td>                                                <td><select class="input-medium" name="wpu-silo-slug" id="wpu-silo-slug">                                                        <option value="primary_keyword_pagename"<?php selected($this->_silo_options['silo-slug'], 'primary_keyword_pagename'); ?>>Primary Keyword</option>                                                        <option value="page_title"<?php selected($this->_silo_options['silo-slug'], 'page_title'); ?>>Page Title</option>                                                    </select></td>                                            </tr>                                            <tr>                                                <th><strong>Category</strong></th>                                                <td><select class="input-medium" name="wpu-article-title" id="wpu-article-title">                                                        <option value="primary_keyword_pagename"<?php selected($this->_silo_options['article-title'], 'primary_keyword_pagename'); ?>>Primary Keyword</option>                                                        <option value="page_title"<?php selected($this->_silo_options['article-title'], 'page_title'); ?>>Page Title</option>                                                        <option value="Article_headline"<?php selected($this->_silo_options['article-title'], 'Article_headline'); ?>>Article Headline</option>                                                    </select></td>                                                <td><select class="input-medium" name="wpu-article-slug" id="wpu-article-slug">                                                        <option value="primary_keyword_pagename"<?php selected($this->_silo_options['article-slug'], 'primary_keyword_pagename'); ?>>Primary Keyword</option>                                                        <option value="page_title"<?php selected($this->_silo_options['article-slug'], 'page_title'); ?>>Page Title</option>                                                        <option value="Article_headline"<?php selected($this->_silo_options['article-slug'], 'Article_headline'); ?>>Article Headline</option>                                                    </select></td>                                            </tr>                                            <tr>                                                <th><strong>Supporting Article</strong></th>                                                <td><select class="input-medium" name="wpu-altail-title" id="wpu-altail-title">                                                        <option value="primary_keyword_pagename"<?php selected($this->_silo_options['longtail-title'], 'primary_keyword_pagename'); ?>>Primary Keyword</option>                                                        <option value="page_title"<?php selected($this->_silo_options['longtail-title'], 'page_title'); ?>>Page Title</option>                                                        <option value="Article_headline"<?php selected($this->_silo_options['longtail-title'], 'Article_headline'); ?>>Article Headline</option>                                                    </select></td>                                                <td><select class="input-medium" name="wpu-altail-slug" id="wpu-altail-slug">                                                        <option value="primary_keyword_pagename"<?php selected($this->_silo_options['longtail-slug'], 'primary_keyword_pagename'); ?>>Primary Keyword</option>                                                        <option value="page_title"<?php selected($this->_silo_options['longtail-slug'], 'page_title'); ?>>Page Title</option>                                                        <option value="Article_headline"<?php selected($this->_silo_options['longtail-slug'], 'Article_headline'); ?>>Article Headline</option>                                                    </select></td>                                            </tr>                                            </tbody>                                        </table>                                    </div>                                </div>                                <div class="control-group">                                    <div class="controls">                                        <input type='submit' name="advancedSubmit" id="advancedSubmit" class='button-primary' value='Import Silo XML File'/>										<?php wp_nonce_field('wpus-silo-advanced-setup'); ?>                                    </div>                                </div>                            </div>                        </div>                    </form>                </div>                <!-- end #wpu-advanced -->            </div>			<?php		} // end create_silo_admin		/**		 * Update Silo Item Meta by Item position		 *		 * @param int $post_id		 * @param int $parent_id		 * @param array $args		 * @param array $dws_silos		 * @param int $level		 */		function itemSiloMeta($post_id, $parent_id, $args, &$dws_silos, $level)		{			$dws_id = (isset($args["dws_id"])) ? $args["dws_id"] : 0;			$parent_cat_id = (isset($args["parent_cat_id"])) ? $args["parent_cat_id"] : 0;			$slug = (isset($args["slug"])) ? $args["slug"] : "";			$title = (isset($args["title"])) ? $args["title"] : "";			$topCategory = (isset($args["topCategory"])) ? $args["topCategory"] : "";			$default_page_order = (isset($args["default_page_order"])) ? $args["default_page_order"] : 0;			$l = (isset($args["l"])) ? $args["l"] : 0;			$xx = (isset($args["xx"])) ? $args["xx"] : 0;			$ss = (isset($args["ss"])) ? $args["ss"] : 0;			update_post_meta($post_id, "_wpu_silo_dws", (int)$dws_id);			if ($level == 1) {				# check by slug or by post meta if category exists for this silo				$check_silo_cat_id = (int) get_post_meta($post_id, '_wpu_catmatch_dws', true);				if ($check_silo_cat_id) {					$exist = term_exists($check_silo_cat_id, 'category');				} else {					$exist = term_exists($slug, 'category');				}				$args = array('slug' => $slug);				if ($exist) {					$cat_id = wp_update_term($exist['term_id'], 'category', $args);					$cat_id = (array)$cat_id;					$cat_id = $cat_id['term_id'];				} else {					$cat_id = wp_insert_term(ucwords($title), 'category', $args);					$cat_id = (array)$cat_id;					$cat_id = $cat_id['term_id'];				}				update_post_meta($post_id, "_wpu_catmatch_dws", (int)$cat_id);				update_metadata('term', $cat_id, 'tax-order', $default_page_order);				update_metadata('term', $cat_id, '_wpu_pagematch_dws', $post_id);				$dws_silos[$l]['silo']['id'] = $post_id;				$dws_silos[$l]['silo']['dws_id'] = (int)$dws_id;				$dws_silos[$l]['silo']['cat_id'] = $cat_id;				$dws_silos[$l]['silo']['parent'] = 0;				delete_option("category_children");			} elseif ($level == 2) {				$exist = term_exists($topCategory, 'category');				$args = array('slug' => $slug, 'parent' => $parent_cat_id);				if ($exist) {					$cat_id = wp_update_term($exist['term_id'], 'category', $args);					$cat_id = $cat_id['term_id'];				} else {					$cat_id = wp_insert_term(ucwords($topCategory), 'category', $args);					$cat_id = $cat_id['term_id'];				}				update_post_meta($post_id, '_wpu_catmatch_dws', (int)$cat_id);				update_metadata('term', $cat_id, 'tax-order', $default_page_order);				update_metadata('term', $cat_id, '_wpu_pagematch_dws', $post_id);				$dws_silos[$l]['silo']['articles'][$xx]['id'] = $post_id;				$dws_silos[$l]['silo']['articles'][$xx]['dws_id'] = (int)$dws_id;				$dws_silos[$l]['silo']['articles'][$xx]['cat_id'] = $cat_id;				$dws_silos[$l]['silo']['articles'][$xx]['parent'] = $parent_id;				delete_option("category_children");			} else {				$dws_silos[$l]['silo']['articles'][$xx]['post'][$ss]['id'] = $post_id;				$dws_silos[$l]['silo']['articles'][$xx]['post'][$ss]['dws_id'] = (int)$dws_id;				$dws_silos[$l]['silo']['articles'][$xx]['post'][$ss]['parent'] = $parent_id;				wp_set_post_categories($post_id, array($parent_cat_id));				$cat_id = 0;			}			return $cat_id;		}		function processSiloImport($args)		{			set_time_limit(0);			global $wpdb;			$sql = "SELECT distinct(`meta_value`)  FROM `{$wpdb->postmeta}` WHERE `meta_key` LIKE '_wpu_silo_dws'";			$wpu_silo_dws_IDs = $wpdb->get_results($sql, ARRAY_A);			$dws_IDs_arr = array();			if (count($wpu_silo_dws_IDs)) {				foreach ($wpu_silo_dws_IDs as $wpu_silo_dws_ID) {					$dws_IDs_arr[] = $wpu_silo_dws_ID["meta_value"];				}			}			$_FILES = $args['_FILES'];			$_POST = $args['_POST'];			$list = $args['list'];			$wpu_status = (isset($_POST['wpu-post-status'])) ? $_POST['wpu-post-status'] : 'draft';			$wpu_shortcode_toggle = (isset($_POST['wpu-post-shortcode'])) ? $_POST['wpu-post-shortcode'] : 0;			// handle shortcode body			$wpu_shortcode_body = (isset($_POST['wpu-post-shortcode-body'])) ? $_POST['wpu-post-shortcode-body'] : "[wpu_silo excerpt='true' links='10']";			$wpu_shortcode_body_linknumber = (isset($_POST['wpu-post-shortcode-body-linknumber'])) ? $_POST['wpu-post-shortcode-body-linknumber'] : "10";			$wpu_shortcode_body_excerpt = (isset($_POST['wpu-post-shortcode-body-excerpt'])) ? "1" : "0";			$wpu_shortcode_body_thumbnails = (isset($_POST['wpu-post-shortcode-body-thumbnails'])) ? "1" : "0";			$wpu_shortcode_body_breadcrumbs = (isset($_POST['wpu-post-shortcode-body-breadcrumbs'])) ? "1" : "0";			// handle advanced settings			$wpu_silo_title = (isset($_POST['wpu-silo-title'])) ? $_POST['wpu-silo-title'] : '';			$wpu_silo_slug = (isset($_POST['wpu-silo-slug'])) ? $_POST['wpu-silo-slug'] : '';			$wpu_article_title = (isset($_POST['wpu-article-title'])) ? $_POST['wpu-article-title'] : '';			$wpu_article_slug = (isset($_POST['wpu-article-slug'])) ? $_POST['wpu-article-slug'] : '';			$wpu_altail_title = (isset($_POST['wpu-altail-title'])) ? $_POST['wpu-altail-title'] : '';			$wpu_altail_slug = (isset($_POST['wpu-altail-slug'])) ? $_POST['wpu-altail-slug'] : '';			$current_user = wp_get_current_user();			$key_id = '';			$parent_id = '';			$page_name = '';			$page_title = '';			$article_headline = '';			$meta_keyword = '';			$silo_flag = '';			$competing_pages_navorder_default = '';			$silo_navorder_secondary = '';			$date_created = '';			$date_projection = '';			$date_modification = '';			$primary_article = '';			$dws_silos[] = array();			$data[] = array(				'k_id' => $key_id,				'p_id' => $parent_id,				'page_name' => $page_name,				'title' => $page_title,				'article_headline' => $article_headline,				'meta_key' => $meta_keyword,				'silo_flag' => $silo_flag,				'default_page_order' => $competing_pages_navorder_default,				'silo_navorder' => $silo_navorder_secondary,				'date_created' => $date_created,				'date_projection' => $date_projection,				'days_modification' => $date_modification,				'article' => $primary_article			);			unset($_wpuSilos);			$_wpuSilos = $this->_siloArray;			$l = 0;			$mc_current_user = $args['current_user_id'];			// loop through each item in array to process Page, Categories, and Posts of Silo Structure.			foreach ($list as $k => $item) {				$wpu_future = '';				$my_query = null;				global $post;				# skip if not silo				if ("Silo" != $item['silo_flag'])					continue;				//====SEARCH EXISTING PARENT====				$p_id = $item['p_id'];				$args = array(					'post_type' => 'page',					'post_status' => array('publish', 'draft'),					'meta_query' => array(						array(							'key' => '_wpu_silo_dws',							'value' => (int)$p_id,							'compare' => '=',						)					)				);				$hasParentQuery = new WP_Query($args);				if ($hasParentQuery->have_posts()) :					$hasParentQuery->the_post();					$gl_parent = get_the_ID();					$post = get_post($gl_parent);					$itemlevel = ($post->post_parent == 0) ? 2 : 3 ;					$itemposttype = ($post->post_parent == 0) ? "page" : "post" ;					$gl_cat_id = get_category_by_slug(get_post_field('post_name',$gl_parent))->term_id;					$gl_cat_id = isset($gl_cat_id) ? $gl_cat_id : 0;				else:					$gl_parent = 0;					$itemlevel = 1;					$itemposttype = "page";					$gl_cat_id = 0;				endif;				//==============================				$args = array(					'post_type' => array('page','post'),					'post_status' => array('publish', 'draft'),					'meta_query' => array(						array(							'key' => '_wpu_silo_dws',							'value' => (int)$k,							'compare' => 'LIKE',						)					)				);				query_posts($args);				// Check to see if Silo Page Already Exists.				if (have_posts()) {					the_post();					$wpu_page_id = get_the_ID();					$silo_cat_id = get_category_by_slug(get_post_field('post_name',$wpu_page_id))->term_id;					$silo_cat_id = isset($silo_cat_id) ? $silo_cat_id : 0;				} # post was not found, but there are children                elseif (1 == count($item)) {					# skip them					continue;				} else {					// SILO PAGES IMPORT BEGIN					// No existing page exists, continue to create initial silo page.					$mc_page_title = $item['title'];					$mc_page_name = $item['name'];					$mc_article_headline = $item['article_headline'];					$mc_meta_keyword = $item['meta_key'];					$mc_meta_desc = $item['meta_description'];					/* Silo Title */					if ($wpu_silo_title):						switch ($wpu_silo_title):							case "primary_keyword_pagename":								$silo_title = $mc_page_name;								break;							case "page_title":								$silo_title = $mc_page_title;								break;							case "Article_headline":								$silo_title = $mc_article_headline;								break;							default:								$silo_title = $mc_page_name;								break;						endswitch; else:						//defaults						$silo_title = $mc_page_name;					endif;					/* Silo Slug */					if ($wpu_silo_slug):						switch ($wpu_silo_slug):							case "primary_keyword_pagename":								$silo_slug = $mc_page_name;								break;							case "page_title":								$silo_slug = $mc_page_title;								break;							case "Article_headline":								$silo_slug = $mc_article_headline;								break;							default:								$silo_slug = $mc_page_title;								break;						endswitch; else:						//defaults						$silo_slug = $mc_page_title;					endif;					if ($wpu_shortcode_toggle):						$silo_article = trim($item['article']) . $wpu_shortcode_body;					else:						$silo_article = trim($item['article']);					endif;					$mc_page_content = $silo_article;					if ($item['silo_navorder']): $mc_page_order = $item['silo_navorder'];					else: $mc_page_order = $item['default_page_order'];					endif;					$mc_page_excerpt = $item['article_synopsis'];					$mc_page_date_created = $item['date_created'];					if ($item['date_created'] == "") {						$mc_page_date_created = date("Y-m-d H:i:s");					}					$timed = date("Y-m-d H:i:s");					if (!in_array($item['dws_id'], $dws_IDs_arr)) {						$dws_IDs_arr[] = $item['dws_id'];						$mc_page_array = array(							'menu_order' => $mc_page_order,							'post_author' => $mc_current_user,							'post_content' => $mc_page_content,							'post_excerpt' => $mc_page_excerpt,							'post_status' => 'future',							'post_date' => $mc_page_date_created,							'post_date_gmt' => gmdate("Y-m-d H:i:s", strtotime($mc_page_date_created . ' GMT')),							'post_name' => $silo_slug,							'post_title' => ucwords($silo_title),							'post_type' => $itemposttype,							'meta_input' => array('_wpu_silo_dws' => (int)$item['dws_id']) //since wp 4.4.0						);						if($itemlevel == 2){							$mc_page_array['post_parent'] = $gl_parent;						}						if (strtotime($timed) < strtotime($mc_page_date_created)):							$mc_page_array["post_status"] = 'future';						else:							$mc_page_array["post_status"] = $wpu_status;						endif;						$wpu_page_id = wp_insert_post($mc_page_array);						$this->updateSEO($wpu_page_id, $mc_page_title, $mc_meta_desc, $mc_meta_keyword);						// DWS LEVEL						$args = array(							"dws_id" => $item['dws_id'],							"slug" => $silo_slug,							"title" => $silo_title,							"topCategory" => $silo_title,							"parent_cat_id" => $gl_cat_id,							"default_page_order" => $item['default_page_order'],							"l" => $l,							"xx" => 0,							"ss" => 0,						);						$silo_cat_id = $this->itemSiloMeta($wpu_page_id, $gl_parent, $args, $dws_silos, $itemlevel);					}				}				wp_reset_query(); // resets loop for next node				unset($wpu_cat_array);				// SILO CHILD PAGES IMPORT BEGIN				if (array_key_exists('children', $item) && $item['children']) {					$xx = 0;					foreach ($item['children'] as $child) {						$subitemlevel = $itemlevel + 1;						$subitemposttype = ($subitemlevel == 2) ? "page" : "post" ;						# skip if not category						if ("Article" != $child['silo_flag'])							continue;						switch ($wpu_silo_slug):							case "primary_keyword_pagename":								$topCategory = $child['name'];								break;							case "page_title":								$topCategory = $child['title'];								break;							case "Article_headline":								$article_slug = $child['article_headline'];								break;							default:								$topCategory = $child['name'];								break;						endswitch;						$args = array(							'post_type' => 'page',							'meta_query' => array(								array(									'key' => '_wpu_silo_dws',									'value' => (int)$child['dws_id'],									'compare' => 'LIKE',								)							)						);						query_posts($args);						// Check to see if Silo Page Already Exists.						if (have_posts()) {							the_post();							$wpus_cat_id = get_category_by_slug($child['name'])->term_id;							$wpus_cat_id = isset($wpus_cat_id) ? $wpus_cat_id : 0;						} else {							$wpus_child_page_title = $child['title'];							$wpus_child_page_name = $child['name'];							$wpus_child_article_headline = $child['article_headline'];							$wpus_child_meta_keyword = $child['meta_key'];							$wpus_child_meta_desc = $child['meta_description'];							/* Article Title */							if ($wpu_article_title):								switch ($wpu_article_title):									case "primary_keyword_pagename":										$article_title = $wpus_child_page_name;										break;									case "page_title":										$article_title = $wpus_child_page_title;										break;									case "Article_headline":										$article_title = $wpus_child_article_headline;										break;									default:										$article_title = $wpus_child_article_headline;										break;								endswitch; else:								//defaults								$article_title = $wpus_child_article_headline;							endif;							/* Article Slug */							if ($wpu_silo_slug):								switch ($wpu_silo_slug):									case "primary_keyword_pagename":										$article_slug = $wpus_child_page_name;										break;									case "page_title":										$article_slug = $wpus_child_page_title;										break;									case "Article_headline":										$article_slug = $wpus_child_article_headline;										break;									default:										$article_slug = $wpus_child_page_name;										break;								endswitch; else:								//defaults								$article_slug = $wpus_child_page_name;							endif;							if ($wpu_shortcode_toggle):								$child_article = trim($child['article']) . $wpu_shortcode_body;							else:								$child_article = trim($child['article']);							endif;							$wpus_child_page_content = $child_article;							if ($child['silo_navorder']): $wpus_child_page_order = $child['silo_navorder']; else: $wpus_child_page_order = $child['default_page_order']; endif;							$wpus_child_page_date_created = $child['date_created'];							if ($child['date_created'] == "") {								$wpus_child_page_date_created = date("Y-m-d H:i:s");							}							$wpus_child_page_excerpt = $child['article_synopsis'];							if (!in_array($child['dws_id'], $dws_IDs_arr)) {								$dws_IDs_arr[] = $child['dws_id'];								$wpus_child_page_array = array(									'menu_order' => $wpus_child_page_order,									'post_author' => $mc_current_user,									'post_content' => $wpus_child_page_content,									'post_excerpt' => $wpus_child_page_excerpt,									'post_name' => $article_slug,									'post_status' => 'future',									'post_date' => $wpus_child_page_date_created,									'post_date_gmt' => gmdate("Y-m-d H:i:s", strtotime($wpus_child_page_date_created . ' GMT')),									'post_title' => ucwords($article_title),									'post_type' => $subitemposttype,									'meta_input' => array('_wpu_silo_dws' => (int)$child['dws_id']) //since wp 4.4.0								);								if($subitemlevel == 2){									$wpus_child_page_array['post_parent'] = $wpu_page_id;								}								if (date("Y-m-d H:i:s") > strtotime($wpus_child_page_date_created)):									$wpus_child_page_array["post_status"] = 'future';								else:									$wpus_child_page_array["post_status"] = $wpu_status; //Set the status of the new post.								endif;								$wpus_page_id = wp_insert_post($wpus_child_page_array);								$this->updateSEO($wpus_page_id, $wpus_child_page_title, $wpus_child_meta_keyword, $wpus_child_meta_desc);								update_post_meta($wpus_page_id, "_wpu_silo_dws", (int)$child['dws_id']);								// DWS LEVEL								$args = array(									"dws_id" => $child['dws_id'],									"slug" => $article_slug,									"title" => $silo_title,									"topCategory" => $topCategory,									"parent_cat_id" => $silo_cat_id,									"default_page_order" => $child['default_page_order'],									"l" => $l,									"xx" => $xx,									"ss" => 0,								);								$wpus_cat_id = $this->itemSiloMeta($wpus_page_id, $wpu_page_id, $args, $dws_silos, $subitemlevel);							}						}						wp_reset_query(); // resets loop for next node						if ($wpus_cat_id == "") {							$wpus_cat_id = get_category_by_slug($child['name'])->term_id;							$wpus_cat_id = isset($wpus_cat_id) ? $wpus_cat_id : 0;						}						$wpu_cat_array[] = $wpus_cat_id;						// SILO CHILD POSTS IMPORT BEGIN						if (array_key_exists('children', $child)) {							$ss = 0;							foreach ($child['children'] as $subChild) {								# skip if not category								if ("Article Long Tail" != $subChild['silo_flag'])									continue;								$args = array(									'post_type' => 'post',									'meta_query' => array(										array(											'key' => '_wpu_silo_dws',											'value' => (int)$subChild['dws_id'],											'compare' => 'LIKE',										)									)								);								query_posts($args);								if (have_posts()) {									continue;								} else {									$mc_post_title = $subChild['title'];									$mc_post_name = $subChild['name'];									$mc_article_headline = $subChild['article_headline'];									$mc_child_meta_keyword = $subChild['meta_key'];									$mc_child_meta_desc = $subChild['meta_description'];									/* Article Long Tail Title */									if ($wpu_altail_title):										switch ($wpu_article_title):											case "primary_keyword_pagename":												$article_long_tail_title = $mc_post_name;												break;											case "page_title":												$article_long_tail_title = $mc_post_title;												break;											case "Article_headline":												$article_long_tail_title = $mc_article_headline;												break;											default:												$article_long_tail_title = $mc_article_headline;												break;										endswitch; else:										//defaults										$article_long_tail_title = $mc_article_headline;									endif;									/* Article Long Tail Slug */									if ($wpu_altail_slug):										switch ($wpu_altail_slug):											case "primary_keyword_pagename":												$article_long_tail_slug = $mc_post_name;												break;											case "page_title":												$article_long_tail_slug = $mc_post_title;												break;											case "Article_headline":												$article_long_tail_slug = $mc_article_headline;												break;											default:												$article_long_tail_slug = $mc_post_title;												break;										endswitch; else:										//defaults										$article_long_tail_slug = $mc_post_title;									endif;									if ($mc_post_title == "" && $mc_post_name != "") {										$mc_post_title = $mc_post_name;									}									$mc_posts = trim($subChild['article']);									$mc_category = $wpus_cat_id;									if ($subChild['silo_navorder']): $mc_post_order = $subChild['silo_navorder']; else: $mc_post_order = $subChild['default_page_order']; endif;									$mc_date_created = $subChild['date_created'];									if ($subChild['date_created'] == "") {										$mc_date_created = date("Y-m-d H:i:s");									}									if (date("Y-m-d H:i:s") > strtotime($mc_date_created)): $wpu_future = 'future'; else: $wpu_future = $wpu_status; endif;									$mc_excerpt = $subChild['article_synopsis'];									if (!in_array($subChild['dws_id'], $dws_IDs_arr)) {										$dws_IDs_arr[] = $subChild['dws_id'];										$mc_post_array = array(											'menu_order' => $mc_post_order,											'post_author' => $mc_current_user,											'post_category' => array($mc_category),											'post_content' => $mc_posts,											'post_excerpt' => $mc_excerpt,											'post_name' => $article_long_tail_slug,											'post_status' => 'future',											'post_date' => $mc_date_created,											'post_date_gmt' => gmdate("Y-m-d H:i:s", strtotime($mc_date_created . ' GMT')),											'post_title' => ucwords($article_long_tail_title),											'post_type' => 'post',											'meta_input' => array('_wpu_silo_dws' => (int)$subChild['dws_id']) //since wp 4.4.0										);										if ($wpu_future == 'future'):											$mc_post_array["post_status"] = 'future';										else:											$mc_post_array["post_status"] = $wpu_status; //Set the status of the new post.										endif;										$wpu_child_page_id = wp_insert_post($mc_post_array);										$this->updateSEO($wpu_child_page_id, $mc_post_title, $mc_child_meta_keyword, $mc_child_meta_desc);										// DWS LEVEL										$args = array(											"dws_id" => $subChild['dws_id'],											"parent_cat_id" => $mc_category,											"default_page_order" => $subChild['default_page_order'],											"l" => $l,											"xx" => $xx,											"ss" => $ss,										);										$this->itemSiloMeta($wpu_child_page_id, $wpus_page_id, $args, $dws_silos, 3);									}								}								wp_reset_query();								$ss++;							} // end foreach						} // endif						update_post_meta($wpu_page_id, "_wpu_silo_children", $wpu_cat_array);						$xx++;					} // end foreach (children)				} // end if(children)				$l++;			} // end foreach			if (!empty($dws_silos)) update_option("_wpu_all_silos", maybe_unserialize(array_values($dws_silos)));		} // end processSiloImport		/**		 * Update Silo Item SEO Meta		 *		 * @param int $id		 * @param string $titletag		 * @param string $metakeyword		 * @param string $description		 */		function updateSEO($id, $titletag = '', $description = '', $metakeyword = '')		{			$seometa = array(				"title" => $titletag,				"description" => $description,				"keywords" => $metakeyword			);			$this->update_others_seo_metafields($id, $seometa, false, true);		} // end updateSEO		function import_advanced_xml($path)		{			if (!is_readable($path)) return false;			$result = array();			if (file_exists($path)) {				//Open the xml file (remove invalid characters)				$xml = file_get_contents($path);				$xml = preg_replace( '/[^[:print:]]/', '',$xml);				$xml = simplexml_load_string($xml);				if ($xml === FALSE) {					return false;				} else {					foreach ($xml->BPNode as $bundle) // loop through our silos					{						// pull in each node from the XML						$key_id = $bundle->keyword_id;						$parent_id = $bundle->parent_keyword_id;						$page_name = $bundle->primary_keyword_pagename;						$page_title = $bundle->page_title;						$article_headline = $bundle->Article_headline;						$meta_keyword = $bundle->meta_keywords;						$meta_description = $bundle->meta_description;						$silo_flag = $bundle->silo_flag;						$article_synopsis = $bundle->article_synopsis;						$competing_pages_navorder_default = $bundle->competing_pages_navorder_default;						$silo_navorder_secondary = $bundle->silo_navorder_secondary;						$date_created = $bundle->default_date_created;						$date_projection = $bundle->date_projection;						$date_modification = $bundle->date_projection_days_modification;						$primary_article = $bundle->primary_article;						$result[] = array(							'k_id' => $key_id,							'dws_id' => $key_id,							'p_id' => $parent_id,							'page_name' => $page_name,							'title' => $page_title,							'article_headline' => $article_headline,							'meta_key' => $meta_keyword,							'meta_description' => $meta_description,							'article_synopsis' => $article_synopsis,							'silo_flag' => $silo_flag,							'default_page_order' => $competing_pages_navorder_default,							'silo_navorder' => $silo_navorder_secondary,							'date_created' => $date_created,							'date_projection' => $date_projection,							'days_modification' => $date_modification,							'article' => $primary_article						);					} //end foreach				}			} else {				return false;			}			return $result;		} // end import_advanced_xml		/**		 * Checking if we can change .htaccess file to change permalink structure		 *		 * @return bool is_writable		 *		function wpu_can_write_to_htaccess()		{		$filename_full = ".htaccess";		$site_dir_path = get_home_path();		$is_writable_dir = is_writable($site_dir_path);		$is_writable_file = is_file($site_dir_path . $filename_full) and is_writable($site_dir_path . $filename_full);		$is_no_file = !is_file($site_dir_path . $filename_full);		return (($is_writable_file and $is_writable_dir) or ($is_no_file and $is_writable_dir));		}		/**		 * Change permalink structure to Silo User Friendly		 *		function wpu_reset_permalinks()		{		global $wp_rewrite;		if ($this->wpu_can_write_to_htaccess()) {		$wp_rewrite->set_permalink_structure('/%category%/%postname%/');		$wp_rewrite->flush_rules();		}		}*/		/**		 * Display dismissable prompt to visit Manual Silo Builder		 */		function silo_msb_notice() {			$silo_msb_url = get_admin_url() . 'admin.php?page=wpu-silo-manual-builder';			$silo_msb_ignore = get_admin_url() . '?silo_msb_ignore=0';			/* Check that someone hasn't already clicked to ignore the message */			if ( ! get_option('silo_msb_notice') ) {				echo '<div class="updated"><p>';				printf(__('If you upgraded from a previous version of the Silo plugin, you need to open the <a href="%1$s">Manual Silo Builder</a> one time, which will update all the codes | <a href="%2$s">Hide Notice</a>'), $silo_msb_url, $silo_msb_ignore);				echo "</p></div>";			}		}		function silo_msb_ignore() {			/* If user clicks to ignore the notice, add that to option table */			if ( isset($_GET['silo_msb_ignore']) && '0' == $_GET['silo_msb_ignore'] ) {				update_option('silo_msb_notice', true);			}		}		/**		 * Adding main navigation menu.		 * Adding main home page and setting it as front-page unless already set.		 */		function add_main_navigation_menu()		{			$menuname = $this->_siloOptions["silo-menu-title"];			$menu_exists = wp_get_nav_menu_object($menuname);			if (!$menu_exists) {				$menu_id = wp_create_nav_menu($menuname);				update_option("silo_seo_menu_id", $menu_id);				$auto_add = get_option('nav_menu_options');				if (!isset($auto_add['auto_add']) or  !is_array($auto_add['auto_add'])) {					$auto_add['auto_add'] = array();				}				if (false === array_search($menu_id, $auto_add['auto_add'])) {					$auto_add['auto_add'][] = $menu_id;				}				update_option('nav_menu_options', $auto_add);			}			$page = get_option("show_on_front");			$homepage_style = ((isset($this->_silo_options['wpu_blogroll_frontpage']) || array_key_exists('wpu_blogroll_frontpage', $this->_silo_options)) ? $this->_silo_options['wpu_blogroll_frontpage'] : $this->_silo_options['wpu_blogroll_frontpage'] = 0);			if (($page != "page") && ($homepage_style != 1)) {				$mc_page_array = array(					'menu_order' => -1,					'post_author' => get_current_user_id(),					'post_content' => '',					'post_status' => 'publish',					'post_title' => "Home",					'post_type' => 'page'				);				$wpu_page_id = wp_insert_post($mc_page_array);				update_option('page_on_front', $wpu_page_id);				update_option('show_on_front', 'page');			}		}		/**		 * Silo Breadcrumbs with RDF markup for Silo structure in shortcode and widget.		 *		 * @param int $post_id		 * @param WP_Query $silo_query		 * @return string $breadcrumbs		 */		function wpu_breadcrumb($post_id = null, $silo_query = null)		{			$args = array(				'front_page' => false,				'singular_post_taxonomy' => 'category',				'home_title' => 'Home',			);			if (is_front_page() && !$args['front_page'])				return apply_filters('wpu_breadcrumb', false);			$title = (!empty($args['title']) ? '<span class="breadcrumbs-title">' . $args['title'] . '</span>' : '');			$separator = "<span class='separator'>&raquo;</span>";			$items = $this->wpu_breadcrumb_items($post_id, $args, $silo_query);			$breadcrumbs = '<div class="breadcrumb-part">';			$breadcrumbs .= '<div xmlns:v="http://rdf.data-vocabulary.org/#">';			$breadcrumbs .= join(" {$separator} ", $items);			$breadcrumbs .= '</div>';			$breadcrumbs .= '</div>';			$breadcrumbs = apply_filters('wpu_breadcrumb', $breadcrumbs);			return $breadcrumbs;		}		/**		 * Get array of parent items for Silo Breadcrumb		 *		 * @param int $post_id		 * @param array $args		 * @param WP_Query $silo_query		 *		 * @return array items for breadcrumbs		 */		function wpu_breadcrumb_items($post_id = null, $args = array(), $silo_query = null)		{			global $post;			$temppost = $post;			$post = get_post($post_id);			$item = array();			$tempitem = array();			$non_stop = true;			$home_title = "Home";			//$home_title = (isset($args["home_title"]) and trim($args["home_title"])) ? $args["home_title"] : __('Home') ;			$silo_data = get_post_meta($post_id, '_wpu_silo_dws', true);			if (!is_front_page() and $silo_data) {				$item[] = '<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="' . home_url('/') . '" class="home">' . $home_title . '</a></span>';				$current_post = $post;				$counter = 0;				while ($non_stop and $counter < 5) {					$current_post_type = $current_post->post_type;					$current_post_parent = $current_post->post_parent;					if ("post" == $current_post_type) {						$counter++;						$terms = wp_get_object_terms($post_id, "category");						$parent_term = $terms[0];						$par_ID = (is_object($parent_term)) ? $parent_term->term_id : $parent_term;						$args = array(							'posts_per_page' => 1,							'meta_key' => '_wpu_catmatch_dws',							'meta_value' => $par_ID,							'post_type' => 'page');						$posts_array = get_posts($args);						$current_post = $posts_array[0];						$tempitem[] = '<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="' . get_permalink($current_post->ID) . '">' . get_the_title($current_post->ID) . '</a></span>';					} elseif ("page" == $current_post_type and 0 != $current_post_parent) {						$counter++;						$parent_id = $current_post->post_parent;						$current_post = get_post($parent_id);						$tempitem[] = '<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="' . get_permalink($current_post->ID) . '">' . get_the_title($current_post->ID) . '</a></span>';					} elseif ("page" == $current_post_type and 0 == $current_post_parent) {						$counter++;						$non_stop = false;					}				}				$item = array_merge($item, array_reverse($tempitem));				$item['last'] = get_the_title($post_id);			} else {				$item['last'] = '<span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="' . home_url('/') . '" class="home">' . __('Home') . '</a></span>';			}			$post = $temppost;			return $item;		}		/**		 * Get array of SEO-plugins detectable by Silo Builder		 *		 * @return array structure of detectable plugins and fields		 */		function wpu_detect_seo_plugins_detectable()		{			$plugins = array(				"WordPress SEO by Yoast" => array(					"class" => "WPSEO_Meta",					"file" => "wordpress-seo/wp-seo.php",					"metas" => array(						"title" => array("_yoast_wpseo_title"),						"description" => array("_yoast_wpseo_metadesc"),						"keywords" => array("_yoast_wpseo_focuskw"),					)				),				"All in One SEO Pack" => array(					"class" => "All_in_One_SEO_Pack",					"file" => "all-in-one-seo-pack/all_in_one_seo_pack.php",					"metas" => array(						"title" => array("_aioseop_title"),						"description" => array("_aioseop_description"),						"keywords" => array("_aioseop_keywords"),					)				),				"SEO Ultimate Pro" => array(					"class" => "SEO_Ultimate",					"file"  => "seoupro/seo-ultimate-pro.php",					"metas" => array(						"title"       => array( "_su_title", "_su_og_title" ),						"description" => array( "_su_description", "_su_og_description" ),						"keywords"    => array(),					)				),				"Platinum SEO Pack" => array(					"class" => "Platinum_SEO_Pack",					"file" => "platinum-seo-pack/platinum_seo_pack.php",					"metas" => array(						"title" => array("title"),						"description" => array("description"),						"keywords" => array("keywords"),					)				),				"HeadSpace" => array(					"class" => "HeadSpace_Plugin",					"file" => "headspace2/headspace.php",					"metas" => array(						"title" => array("_headspace_page_title"),						"description" => array("_headspace_description"),						"keywords" => array(),					)				),				"SmartCrawl" => array(					"class" => "SmartCrawl_Plugin",					"file" => "wpmu-dev-seo/wpmu-dev-seo.php",					"metas" => array(						"title" => array("_wds_title"),						"description" => array("_wds_metadesc"),						"keywords" => array("_wds_keywords"),					)				),			);			return $plugins;		}		/**		 * Get array of detected active SEO plugins		 *		 */		function wpu_detect_seo_plugins()		{			$seos = array();			$plugins = $this->wpu_detect_seo_plugins_detectable();			foreach ($plugins as $title => $plugin) {				if (is_plugin_active($plugin["file"])) {					$seos[] = $title;				}			}			return $seos;		}		/**		 * Get Meta, stored early by other plugins		 *		 * @param int $post_id		 *		 * @return array of meta		 */		function get_meta_fields_from_other_seo($post_id)		{			$result = array(				"title" => "",				"description" => "",				"keywords" => "",			);			$key_positions = array("title", "description", "keywords");			$plugins = $this->wpu_detect_seo_plugins_detectable();			$detected_seos = $this->wpu_detect_seo_plugins();			if (count($detected_seos)) {				foreach ($detected_seos as $detected_seo) {					foreach ($key_positions as $key_position) {						$key = @$plugins[$detected_seo]["metas"][$key_position][0];						if ($key) {							$val = get_post_meta($post_id, $key, true);							$result[$key_position] .= ($val) ? $val . " " : "";						}					}				}			}			return $result;		}		/**		 * Update Meta of Detected SEO plugins, unless Use Other SEO checkbox in Settings is checked.		 *		 * @param int $post_id		 * @param array $seometa		 * @param bool $if_not_empty		 * @param bool $save_wpu_too		 *		 */		function update_others_seo_metafields($post_id, $seometa, $if_not_empty = false, $save_wpu_too = false)		{			$plugins = $this->wpu_detect_seo_plugins_detectable();			$detected_seos = $this->wpu_detect_seo_plugins();			// Break if there is another SEO plugin and user wants to use it			$other_check = (isset($this->_silo_options['wpu_use_other_seo']) ? $this->_silo_options['wpu_use_other_seo'] : 0);			if (($other_check == 1) && ($detected_seos)){				return true;			}			$key_positions = array_keys($seometa);			if (count($detected_seos)) {				foreach ($detected_seos as $detected_seo) {					foreach ($key_positions as $key_position) {						if ($seometa[$key_position]) {							$keys = $plugins[$detected_seo]["metas"][$key_position];							if (count($keys)) {								foreach ($keys as $key) {									if ($if_not_empty) {										$val = get_post_meta($post_id, $key, true);										if (!$val) {											update_post_meta($post_id, $key, $seometa[$key_position]);										}									} else {										update_post_meta($post_id, $key, $seometa[$key_position]);									}								}							}						}					}				}			} else {				$save_wpu_too = true;			}			if ($save_wpu_too) {				$seo = array();				if ($seometa["title"]) $seo['title'] = $seometa["title"];				if ($seometa["keywords"]) $seo['keywords'] = $seometa["keywords"];				if ($seometa["description"]) $seo['desc'] = $seometa["description"];				update_post_meta($post_id, "dws_seo_meta", $seo);			}		}	} // end Class}//init plugin classregister_deactivation_hook(__FILE__, 'dws_silo_deactivate');function dws_silo_deactivate(){	update_option('page_on_front', 0);	update_option('show_on_front', 'posts');}add_action('plugins_loaded', 'wpu_silo_builder_init');function wpu_silo_callback($atts){	extract(shortcode_atts(array(		'excerpt' => false,		'breadcrumbs' => false,		'show_thumbnails' => false,		'links' => 10,	), $atts));	$links = ((isset($atts['links']) || ($atts['links'] == '0')) ? (int)$atts['links'] : 10);	$excerpt = ((!isset($atts['excerpt']) || ($atts['excerpt'] =='0') || ($atts['excerpt'] =='false')) ? false : true);	$breadcrumbs = ((!isset($atts['breadcrumbs']) || ($atts['breadcrumbs'] =='0') || ($atts['breadcrumbs'] =='false')) ? false : true);	$show_thumbnails = ((!isset($atts['show_thumbnails']) || ($atts['show_thumbnails'] =='0') || ($atts['show_thumbnails'] =='false')) ? false : true);	# if excerpt is empty, don't include content in it	remove_filter('get_the_excerpt', 'wp_trim_excerpt');	$txt = "";	$txtContent = displaySilo($excerpt, false, $links, $show_thumbnails, $breadcrumbs);	if ($txtContent) {		$txt = $txtContent;	}	# revert to how it used to be	add_filter('get_the_excerpt', 'wp_trim_excerpt');	return $txt;}function detect_brdcrmb_in_widget(){	$silosettings = get_option('widget_dws_advanced_silo');	if (is_array($silosettings)) {		foreach ($silosettings as $setting) {			if (is_array($setting)) {				if (isset($setting['show_breadcrumbs']) and ($setting['show_breadcrumbs'] == 1)) {					return true;				}			}		}	}	return false;}/** * Adds V_Advanced_Silo widget */class V_Advanced_Silo extends WP_Widget{	public function __construct()	{		parent::__construct(			'dws_advanced_silo', // Base ID			'Silo Widget', // Name			array('description' => __('Navigation that changes based on where the visitor is in the silo structure')) // Args		);	}	/**	 * Front-end display of widget	 *	 * @see WP_Widget::widget()	 *	 * @param array $args     Widget arguments.	 * @param array $instance Saved values from database.	 */	public function widget($args, $instance)	{		$title = apply_filters('widget_title', empty($instance['title']) ? '' : $instance['title'], $instance, $this->id_base);		//$home_title = empty($instance['home_title']) ? 'Home' : $instance['home_title'];		if (empty($instance['pages_number']) || !$pages_number = absint($instance['pages_number']))			$pages_number = 10;		if (empty($instance['posts_number']) || !$posts_number = absint($instance['posts_number']))			$posts_number = 10;		$show_thumbnails = isset($instance['show_thumbnails']) ? $instance['show_thumbnails'] : 0;		$show_breadcrumbs = isset($instance['show_breadcrumbs']) ? $instance['show_breadcrumbs'] : 0;		$show_excerpt = isset($instance['show_excerpt']) ? $instance['show_excerpt'] : 0;		echo $args['before_widget'];		if ($title)			echo $args['before_title'] . $title . $args['after_title'];		$silo = displaySilo($show_excerpt, true, $pages_number, $show_thumbnails, $show_breadcrumbs, $posts_number);		if ($silo)			echo $silo;		echo $args['after_widget'];	}	/**	 * Back-end widget form	 *	 * @see WP_Widget::form()	 *	 * @param array $instance Previously saved values from database.	 */	public function form($instance)	{		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';		$home_title = isset($instance['home_title']) ? esc_attr($instance['home_title']) : 'Home';		$pages_number = isset($instance['pages_number']) ? absint($instance['pages_number']) : 10;		$posts_number = isset($instance['posts_number']) ? absint($instance['posts_number']) : 10;		$show_thumbnails = isset($instance['show_thumbnails']) ? (bool)$instance['show_thumbnails'] : 0;		$show_excerpt = isset($instance['show_excerpt']) ? (bool)$instance['show_excerpt'] : 0;		$show_breadcrumbs = isset($instance['show_breadcrumbs']) ? (bool)$instance['show_breadcrumbs'] : 0;		?>        <p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?></label>            <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>"                   name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>"/></p>		<?php /*<p><label for="<?php echo $this->get_field_id('home_title'); ?>"><?php _e('Home Page Title:'); ?></label>        <input class="widefat" id="<?php echo $this->get_field_id('home_title'); ?>"               name="<?php echo $this->get_field_name('home_title'); ?>" type="text"               value="<?php echo $home_title; ?>"/></p> */ ?>        <p><label for="<?php echo $this->get_field_id('pages_number'); ?>"><?php _e('Number of pages to show:'); ?></label>            <input id="<?php echo $this->get_field_id('pages_number'); ?>" name="<?php echo $this->get_field_name('pages_number'); ?>"                   type="text" value="<?php echo $pages_number; ?>" size="3"/></p>        <p><label for="<?php echo $this->get_field_id('posts_number'); ?>"><?php _e('Number of posts to show:'); ?></label>            <input id="<?php echo $this->get_field_id('posts_number'); ?>" name="<?php echo $this->get_field_name('posts_number'); ?>"                   type="text" value="<?php echo $posts_number; ?>" size="3"/></p>        <p><input class="checkbox" type="checkbox" <?php checked($show_thumbnails); ?>                  id="<?php echo $this->get_field_id('show_thumbnails'); ?>"                  name="<?php echo $this->get_field_name('show_thumbnails'); ?>"/>            <label for="<?php echo $this->get_field_id('show_thumbnails'); ?>"><?php _e('Show Thumbnails'); ?></label></p>        <p><input class="checkbox" type="checkbox" <?php checked($show_breadcrumbs); ?>                  id="<?php echo $this->get_field_id('show_breadcrumbs'); ?>"                  name="<?php echo $this->get_field_name('show_breadcrumbs'); ?>"/>            <label for="<?php echo $this->get_field_id('show_breadcrumbs'); ?>"><?php _e('Show Breadcrumbs'); ?></label></p>		<?php if ($show_breadcrumbs) {		echo "<strong class='howto'> If you enable breadcrumbs here, breadcrumbs inserted with the shortcode will be disabled.</strong>";	} ?>        <p><input class="checkbox" type="checkbox" <?php checked($show_excerpt); ?>                  id="<?php echo $this->get_field_id('show_excerpt'); ?>"                  name="<?php echo $this->get_field_name('show_excerpt'); ?>"/>            <label for="<?php echo $this->get_field_id('show_excerpt'); ?>"><?php _e('Show Excerpt'); ?></label></p>		<?php	}	/**	 * Sanitize widget form values as they are saved	 *	 * @see WP_Widget::update()	 *	 * @param array $new_instance Values just sent to be saved.	 * @param array $old_instance Previously saved values from database.	 *	 * @return array Updated safe values to be saved.	 */	public function update($new_instance, $old_instance)	{		$instance = $old_instance;		$instance['title'] = strip_tags($new_instance['title']);		//$instance['home_title'] = strip_tags($new_instance['home_title']);		$instance['pages_number'] = isset($new_instance['pages_number']) ? absint($new_instance['pages_number']) : '10';		$instance['posts_number'] = isset($new_instance['posts_number']) ? absint($new_instance['posts_number']) : '10';		$instance['show_thumbnails'] = isset($new_instance['show_thumbnails']) ? (bool)$new_instance['show_thumbnails'] : 0;		$instance['show_breadcrumbs'] = isset($new_instance['show_breadcrumbs']) ? (bool)$new_instance['show_breadcrumbs'] : 0;		$instance['show_excerpt'] = isset($new_instance['show_excerpt']) ? (bool)$new_instance['show_excerpt'] : 0;		return $instance;	}}function wpu_get_the_excerpt($post_id, $content_too = false){	$output = get_the_excerpt($post_id);	if (!$output) {		global $post;		$post = get_post($post_id);		$content_exist = $post->post_content;		if ($content_exist and $content_too) {			$output = $content_exist;			# remove shortcodes and html tags			$output = preg_replace(array('/\[.*\]/','/\<.*\>/'), '', $output);			# remove urls			$output = preg_replace('/(?i)\b((?:https?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:\'".,<>?]))/', '', $output);			# remove linebreaks, multiple spacing and starting/ending whitespace			$output = trim(preg_replace('/\s+/',' ', $output));			$output = wp_trim_words($output, 30, null);		}		else {			$output = "";		}	}	return $output;}/** * Single Part of Silo Structure in widget or shortcode. * * @param int $post_id * @param bool $excerpt * @param bool $breadcrumbs * @param bool $show_thumbnails * @param bool $is_sidebar * @param WP_Query $silo_query * @param string $home_title * * @return string $result Single part of structure */function wpu_get_single_part($post_id = null, $excerpt = false, $breadcrumbs = false, $show_thumbnails = false, $is_sidebar = false, $silo_query = null){	global $post;	$home_title = "Home";	if ($post_id == "home") {		$is_home = true;		$post_id = ('page' == get_option('show_on_front') and get_option('page_on_front')) ? get_option('page_on_front') : null;	} else {		$is_home = false;	}	$result = "";	$thumbnail_size = ($is_sidebar) ? array(32, 32) : 'thumbnail';	$thumbnail_size_img = ($is_sidebar) ? " width='32' height='32' " : '';	if (!$is_home) {		$itemlink = get_permalink($post_id);		$itemtitle = get_the_title($post_id);	} else {		$itemlink = get_home_url();		$itemtitle = $home_title;	}	if ($show_thumbnails) {		if (has_post_thumbnail($post_id)) {			$thumb = wp_get_attachment_image_src(get_post_thumbnail_id($post_id), $thumbnail_size);			$url = $thumb['0'];			if(! $is_sidebar){				$result .= "<meta itemprop='thumbnailUrl image' content='" . $url . "'>";			}			$result .= "<img " . $thumbnail_size_img . " src='" . $url . "' class='silo-thumbnail'>";		}        elseif ($is_sidebar) {			$result .= '<span class="silo-thumbnail-empty" style="display:inline-block;width:32px;height:32px;"></span> ';		}	}	$result .= "<a href='" . $itemlink . "'>" . $itemtitle . "</a>";	if ($excerpt) {		$exc = wpu_get_the_excerpt($post_id);		if ($exc) {			$sidebar_test = ($is_sidebar ? "<div class='silo-text-sidebar'>" : "<div class='silo-text-body'>");			$result .= $sidebar_test . $exc . "</div>";		}	}	return $result;}/** * Display Silo Structure in widget or shortcode with Schema.org markup. * * @param bool $excerpt * @param bool $sidebar * @param int $links * @param bool $show_thumbnails * @param string $home_title * @param bool $breadcrumbs * * @return string Silo structure */function & displaySilo($excerpt = false, $sidebar = false, $links = 0, $show_thumbnails = false, $breadcrumbs = false, $post_links = 0){	global $wpdb, $post, $table_prefix, $wp_query;	$before = '<h3>';	$after = '</h3>';	$count_links = 0;	$count_post_links = 0;	$links = absint($links);	$post_links = absint($post_links);	$tmp_post = $post;	$listing_code = "";	if (is_home() OR is_404() OR !@get_post_meta($post->ID, '_wpu_silo_dws', true)) {		$args = array(			'post_type' => 'page',			'post_status' => 'publish',			'meta_key' => '_wpu_silo_dws',			'post_parent' => 0,			'posts_per_page' => -1,			'orderby' => 'menu_order',			'order' => 'ASC'		);		$silo_pages = new WP_Query($args);		if (false == $sidebar)			$listing_code .= "<div class='wpus-listings'>";		else			$listing_code .= "<ul class='wpus-listings'>";		while ($silo_pages->have_posts()) {			$silo_pages->the_post();			$do_not_duplicate = $post->ID;			# set featured image			$featured_image = '';			# shortcode			if ($show_thumbnails && !$sidebar) {				$featured_image = get_the_post_thumbnail($post->ID);			} # widget            elseif ($show_thumbnails && $sidebar) {				if (has_post_thumbnail($post->ID))					$featured_image = get_the_post_thumbnail($post->ID, array(32, 32)) . ' ';				else					$featured_image = '<span style="display: inline-block; width: 32px"></span> ';			}			if (false == $sidebar)				$listing_code .= "<div class='wpus-related'>";			else				$listing_code .= "<li class='wpus-related'>";			$listing_code .= wpu_get_single_part($do_not_duplicate, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar);			if (false == $sidebar)				$listing_code .= "</div>";			else				$listing_code .= "</li>";			++$count_links;			# end here			if ($count_links == $links)				break;		}		if (false == $sidebar)			$listing_code .= "</div>";		else			$listing_code .= "</ul>";		$post = $tmp_post;		return $listing_code;	}    elseif ($post->ID) {		$tmp_page_id = $post->ID;		$wpu_silo_links_return = "";		# Only show the first instance of the breadcrumb. If breadcrumb is enabled in a widget, don't show breadcrumbs in shortcode		if ($breadcrumbs and !$sidebar and detect_brdcrmb_in_widget()) {			$show_breadcrumbs_once = false;		} elseif ($breadcrumbs) {			if (defined("ALREADY_HAS_BREADCRUMBS")) {				$show_breadcrumbs_once = false;			} else {				define("ALREADY_HAS_BREADCRUMBS", true);				$show_breadcrumbs_once = true;			}		}		if ($breadcrumbs and $show_breadcrumbs_once and get_post_meta($tmp_page_id, '_wpu_silo_dws', true)) {			$wpu_silo_builder = new WPUS_Silo_Builder();			$wpu_silo_links_return .= $wpu_silo_builder->wpu_breadcrumb($post->ID, null);		}		$tmp_post = $post;		if (get_post_meta($tmp_page_id, '_wpu_silo_dws', true)) {			$_silo_options = maybe_unserialize(get_option(WPUS_PLUGIN_OPTIONS));			if (($sidebar == false) and (!empty($_silo_options['silo_title'])))				$wpu_silo_links_return .= $before . $_silo_options['silo_title'] . $after;			# get the id of the category attached to the page			if (get_post_type($tmp_page_id) == 'page'){				$art_cat = get_post_meta($tmp_page_id, '_wpu_catmatch_dws', true);				if ($art_cat)					$silo_cat_id = $art_cat;			}			else {				$silo_cat_fetch = get_the_category($tmp_page_id);				$silo_cat_id = $silo_cat_fetch[0]->term_id;				$args = array(					'post_type' => 'page',					'meta_key' => '_wpu_catmatch_dws',					'posts_per_page' => -1,					'meta_query' => array(						array(							'key'     => '_wpu_catmatch_dws',							'value'   => $silo_cat_id,						),					),				);				$catmatch_query = new WP_Query( $args );				if ($catmatch_query->have_posts()) {					while ($catmatch_query->have_posts()) {						$catmatch_query->the_post();						$page_of_category = $catmatch_query->post->ID;					}				}			}			# Category Level Open			if (($post->post_parent != 0) and (($links != 0) or ($post_links != 0))) {				$wpu_silo_links_return .= "<ul class='wpus-listings'><li class='wpus-related'>";				++$count_links;				$page_or_not_ID = (is_page() ? $post->post_parent : $post->ID);				$wpu_silo_links_return .= wpu_get_single_part($page_or_not_ID, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar);				# end here				if ($count_links == $links) {					return $wpu_silo_links_return;				}				$wpu_silo_links_return .= "<ul class='wpus-listings'>";			} else {				++$count_links;				/*if (is_single()) {                    $wpu_silo_links_return .= "<ul class='wpus-listings'><li class='wpus-related'>" . wpu_get_single_part($page_of_category, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar) . "<ul class='wpus-listings'>";                } else {*/				if ($links != 0) {					//$wpu_silo_links_return .= "<ul class='wpus-listings'><li class='wpus-related'>" . wpu_get_single_part("home", $excerpt, $breadcrumbs, $show_thumbnails, $sidebar, null, $home_title);					# Silo Level					if (($post->post_parent == 0)) {						$wpu_silo_links_return .= "<ul class='wpus-listings'><li class='wpus-related'>" . wpu_get_single_part($tmp_page_id, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar, null);					}				}				/*if (($post->post_parent == 0) and ($links == 0)) {                        $wpu_silo_links_return .= "<ul class='wpus-listings'><li class='wpus-related'>" . wpu_get_single_part($tmp_page_id, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar, null, $home_title);                    }*/				$wpu_silo_links_return .= "<ul class='wpus-listings'>";				//}			}			# end here			if ($count_links == $links)				return $wpu_silo_links_return;			$silo_child_query = '';			if (is_page() && ($post->post_parent == 0)) {				// Query for Parent Silo page				$args = array(					"posts_per_page" => -1,					"post_type" => "page",					"post_status" => "publish",					"orderby" => "menu_order",					"order" => "ASC",					"post_parent" => $tmp_page_id,				);				$silo_query = new WP_Query($args);			} else {				// Main Query for Children.				if (!is_single()) {					$args = array(						"posts_per_page" => -1,						"post_type" => "page",						"post_status" => "publish",						"orderby" => "menu_order",						"order" => "ASC",						"post_parent" => $post->post_parent,					);					if ($links == 0) {						$args["post__in"] = array($post->ID);					}					$silo_query = new WP_Query($args); // Query for Child of Parent Silo. The sub-category listing.				} else {					$args = array(						"posts_per_page" => $post_links,						"post_status" => "publish",						"orderby" => "menu_order",						"order" => "ASC",						"cat" => $silo_cat_id,					);					if ($links == 0) {						$args["post__in"] = array($post->ID);					}					$silo_query = new WP_Query($args); // Query for final tier of silo, post level				}			}			if ($silo_query):				while ($silo_query->have_posts()):					$silo_query->the_post();					$do_not_duplicate = $silo_query->post->ID;					$wpu_silo_links_return .= "<li class='related-listings'>";					$wpu_silo_links_return .= wpu_get_single_part($do_not_duplicate, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar);					if ($silo_query->post->post_parent != $tmp_page_id):						if (!is_single()):							if ($tmp_page_id == $silo_query->post->ID):								$child_page_title = get_the_title($silo_query->post->ID);								$child_silo_cat_id = get_post_meta($silo_query->post->ID, '_wpu_catmatch_dws', true);								//$child_silo_cat_id =  get_cat_ID( $child_page_title );								$silo_child_query = new WP_Query('posts_per_page=-1&orderby=menu_order&order=ASC&post_status=publish&cat=' . $child_silo_cat_id);								if ($silo_child_query->have_posts()):									$wpu_silo_links_return .= "<ul class='wpus-listings'>";									while ($silo_child_query->have_posts()):										$silo_child_query->the_post();										$do_not_duplicate = $silo_child_query->post->ID;										$wpu_silo_links_return .= "<li class='related-listings'>";										$wpu_silo_links_return .= wpu_get_single_part($do_not_duplicate, $excerpt, $breadcrumbs, $show_thumbnails, $sidebar, $silo_child_query);										$wpu_silo_links_return .= "</li>";										++$count_post_links;										# end here										if ($count_post_links == $post_links)											break;									endwhile;									$wpu_silo_links_return .= "</ul>";									# end here									if ($count_links == $links)										break;								endif;							endif;						endif;					endif;					++$count_links;					$wpu_silo_links_return .= "</li>";					# end here					if ($count_links == $links)						break;				endwhile;			endif;			if (is_single()){				$wpu_silo_links_return .= "</ul></li></ul>";			}			else {				$wpu_silo_links_return .= "</ul>";				if ($links != 0) {					/* because we removed home link from Silo					if ($post->post_parent == 0 || $post->post_parent ==$tmp_page_id) {						$wpu_silo_links_return .= "</li></ul>";						}*/					$wpu_silo_links_return .= "</li></ul>";				}				if (($post->post_parent == 0 || $post->post_parent ==$tmp_page_id) and ($links == 0)) {					$wpu_silo_links_return .= "</li></ul>";				}			}			$post = $tmp_post;			return $wpu_silo_links_return;		} else {			return false;		}	}	else {		return false;	}}function wpu_silo_styles(){	$_silo_styles = maybe_unserialize(get_option(WPUS_PLUGIN_STYLES));	if ($_silo_styles['wpus_use_silo_styles'] != "no"):		?>        <style type="text/css">            <?php if ($_silo_styles['line_height']): ?>            .wpus-listings {                line-height: <?php echo $_silo_styles['line_height']; ?> !important;            }            <?php endif; ?>            <?php if ($_silo_styles['link_color'] || $_silo_styles['link_size']): ?>            .wpus-related a, .widget-area .widget .wpus-related a, .related-listings a, .widget a, .widget-area .widget .related-listings a {            <?php if ($_silo_styles['link_color']) echo "color: " . $_silo_styles['link_color'] . " !important;"; ?>            <?php if ($_silo_styles['link_size']) echo "font-size: " . $_silo_styles['link_size'] . $_silo_styles['link_size_type'] . " !important;";  ?>            }            <?php endif; ?>            .wpus-related {            }        </style>	<?php	endif;}add_action('wp_head', 'wpu_silo_styles');// enable shortcode call wpu_silo_home_linksadd_shortcode('wpu_silo', 'wpu_silo_callback');function dws_wp_title(){	global $post, $page, $paged;	if (isset($post->ID)) {		$filtered_title = '';		$values = get_post_custom($post->ID);		$seo = isset($values['dws_seo_meta']) ? maybe_unserialize($values['dws_seo_meta'][0]) : '';		if (is_feed())			return $title;		if (isset($seo['title']))			$filtered_title = ucwords($seo['title']);		if (2 <= $paged || 2 <= $page) {			$filtered_title .= ' | ' . sprintf(__('Page %s'), max($paged, $page));		}		return $title;	}	else {		return $title;	}}add_filter('wp_title', 'dws_wp_title');function dws_seo(){	global $post;	if (isset($post->ID)) {		$values = get_post_custom($post->ID);		$SiloBuilder = new WPUS_Silo_Builder();		if(! count($SiloBuilder->wpu_detect_seo_plugins())){			$seo = isset($values['dws_seo_meta']) ? maybe_unserialize($values['dws_seo_meta'][0]) : '';			$keys = isset($seo['keywords']) ? $seo['keywords'] : '';			$desc = isset($seo['desc']) ? $seo['desc'] : '';			echo '<meta name="keywords" content="' . $keys . '" />';			echo '<meta name="description" content="' . $desc . '" />';		}	}}add_action('wp_head', 'dws_seo', 0);if (defined('WPSEO_VERSION')){	add_action('get_header',function (){ ob_start(function ($o){		return preg_replace('/\n?<.*?yoast.*?>/mi','',$o); }); });	add_action('wp_head',function (){ ob_end_flush(); }, 999);}function wpu_ajax_save_shortcode_body(){	$name = $_POST["name"];	$value = $_POST["value"];	$bodyval = $_POST["bodyval"];	$update_advanced = get_option('_wpu_silo_advanced');	$update_advanced[$name] = $value;	$update_advanced['wpu-post-shortcode-body'] = $bodyval;	update_option('_wpu_silo_advanced',$update_advanced);}add_action('wp_ajax_wpu_ajax_save_shortcode_body', 'wpu_ajax_save_shortcode_body');/* Fixes issue where plugin blocked additional plugin installsfunction http_curl_transport_last( $request_order ) {	$i = array_search( 'curl', $request_order );	if ( $i !== false ) {		unset( $request_order[$i] );		$request_order[] = 'curl';	}	return $request_order;}add_filter( 'http_api_transports', 'http_curl_transport_last' ); */# Make sure permalinks stay /category/postname/function wpu_permalink_check() {	$currentScreen = get_current_screen();	if( (is_admin()) and ($currentScreen->base != 'plugin-install') and ($currentScreen->base != 'ne-video-silo-builder_page_v-silo-manual-builder') ) {		global $wp_rewrite;		$wp_rewrite->set_permalink_structure('/%category%/%postname%/');		$wp_rewrite->flush_rules();	}}add_action('current_screen', 'wpu_permalink_check');?>